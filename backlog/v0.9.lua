--[[
	https://github.com/nexpid/OCPlus
	CC-BY-4.0 license license

	The Creative Commons Attribution 4.0 International License is an open
	and flexible license that grants users the ability to share, adapt,
	and build upon the contents of this project for any purpose, including
	commercial endeavors. Under this license, users are required to provide
	appropriate attribution to the original author(s), acknowledging their
	contribution to the work. This license promotes collaboration and
	innovation by allowing individuals and organizations to leverage and
	modify the project while ensuring that credit is given to the creators.
]]

-- Services n global stuff
task.wait()

local version = "0.9"
local accent = Color3.fromHex("986dcf")
local CAS = game:GetService("ContextActionService")
local VIM = game:GetService("VirtualInputManager")
local TS = game:GetService("TweenService")
local RS = game:GetService("RunService")
local IS = game:GetService("InsertService")
local MS = game:GetService("MarketplaceService")
local UIS = game:GetService("UserInputService")
local HTTP = game:GetService("HttpService")
local FPS = 0
local plr = game.Players.LocalPlayer
local mouse = plr:GetMouse()
local hui = gethui or gethiddenui
if not hui then hui = game.CoreGui
else hui = hui() end

if game.GameId ~= 1053132402 then
	local m = Instance.new("Message", hui)
	m.Text = "This script only works in Obby Creator."
	task.wait(3)
	m:Destroy()
	return
end

local pui = plr:WaitForChild("PlayerGui")
local ldo = pui:WaitForChild("LoadObby")
local ui = pui:WaitForChild("Edit")
local tpb = pui:WaitForChild("TopBar")
local chf = pui:WaitForChild("TrackInputs").ChangeFrame
local out = pui:WaitForChild("LocalOutput")
local tt = ui.SelectionFrame
local props = ui.PropertiesFrame
local propsTxt = props.ScrollingFrame.cEffects1.ScrollingFrame.text1.Text

-- Tools
task.wait()

_G.ocPLncSpeed = _G.ocPLncSpeed or 1.1

local meetamethod = tick()
_G.ocPLmetamethod = meetamethod
local ocpAPI = "https://ocplus-utilities.repl.co/"
_G.ocPLuser = _G.ocPLuser or {}
for _, x in pairs(game.Players:GetChildren()) do
	_G.ocPLuser[tostring(x.UserId)] = x.Name
end

local function cacheUsername(uid, func)
	uid = tostring(uid)
	if _G.ocPLuser[uid] then
		if func then func(_G.ocPLuser[uid]) end
	else
		if func then func("...") end
		task.spawn(function()
			local k, username = pcall(game.Players.GetNameFromUserIdAsync, game.Players, tonumber(uid))
			if not k or not username then username = "[invalid]" end
			
			_G.ocPLuser[uid] = username
			if func then func(username) end
		end)
	end
end

_G.ocPLLCa = _G.ocPLLCa or {}
local function loadLAsset(xr)
	if _G.ocPLLCa[xr] then
		return _G.ocPLLCa[xr]:Clone()
	else
		local oi = IS:LoadLocalAsset(xr)
		_G.ocPLLCa[xr] = oi:Clone()
		return oi
	end
end
local addonsFr, keybindsFr, colpStuff
local toFetch = {
	{"rbxassetid://12318412905", function(x) addonsFr = x end},
	{"rbxassetid://12094135305", function(x) keybindsFr = x end},
	{"rbxassetid://12217234108", function(x) colpStuff = x end},
}
-- Fetching

for _, x in pairs(toFetch) do
	local id, fn = x[1], x[2]

	fn(loadLAsset(id))
end

local Req = request or httprequest or http_request or (http and http.request) or (syn and syn.request)
local executor = identifyexecutor and identifyexecutor() or "unknown"
local platform = UIS:GetPlatform().Name
local customast = getcustomasset or getsynasset

if not Req then
	local message = Instance.new("Message")
	message.Text = (("ðŸš¨ bad exploit alert ðŸš¨\nyour exploit (%s) doesn't support any form of HTTP requests (required)"):format(executor))
	message.Parent = game.CoreGui
	task.wait(5)
	message:Destroy()
	return
end

local function getLProperty(obj, k)
	local scs = pcall(gethiddenproperty, obj, k)
	return scs
end

local function HttpGet(url, tag, extra)
	extra = extra or {}
	extra.Url = url
	extra.Method = extra.Method or "GET"
	local isc, response = pcall(Req, extra)
	if not isc then
		response = {
			Success = false,
			StatusCode = "NaN",
			StatusMessage = response,
			Headers = {},
			Cookies = {}
		}
	end
	
	if not response.Success then
		local st = tostring(response.StatusCode) .. " " .. tostring(response.StatusMessage)
		local caption = ("An error has occured while trying to fetch from: %s\nHTTP Status: %s\n\nA complete error has been copied to your clipboard."):format(url, st)
		if messagebox then
			local message = messagebox(caption, "Uh Oh!", 0)
		else
			rconsoleclear()
			rconsolename("HTTP Error")
			rconsoleprint(caption)
			rconsoleprint("\n\nThis console will close in 10 seconds.")
			task.delay(10, function()
				rconsoleclear()
				rconsoleclose()
			end)
		end

		local heads = {}
		for x, y in pairs(response.Headers or {}) do
			table.insert(heads, ("    %s = %s"):format(x, y))
		end
		local cookies = {}
		for x, y in pairs(response.Cookies or {}) do
			table.insert(cookies, ("    %s = %s"):format(x, y))
		end
		local tosave = ([[--= HTTP Crash Log Generated by OC+ =--
Version: %s
Player: %s (UserID: %s)
Executor: %s
Platform: %s

Error: %s
Request URL: %s
Request Tag: %s

Response Status: %s
Response Headers:
%s
Response Cookies:
%s
Response Body:
%s]]):format(
			version,
			plr.Name,
			plr.UserId,
			executor,
			platform,
			(isc and "NONE" or response),
			url,
			tag or "NONE",
			st,
			table.concat(heads, "\n"),
			table.concat(cookies, "\n"),
			response.Body or ""
		)

		setclipboard(tosave)
		return
	end

	return response.Body
end

local icons = HTTP:JSONDecode(HttpGet("https://raw.githubusercontent.com/nexpid/OCPlus/main/assets/iconOverride.json", "icons"))
local iconMap = {}
for _, x in pairs(icons) do
	if not typeof(x) == "table" then continue end

	for y, z in pairs(x) do
		iconMap[y] = z[2]
	end
end

-- Reverting numero uno
if _G.ocPLrpcW then _G.ocPLrpcW:Close(); _G.ocPLrpcW = nil end
for y, x in pairs(_G.ocPLbackup or {}) do
	for p, v in pairs(x) do
		pcall(function()
			y[p] = v
		end)
	end
end
local Yay, Yoy = 0, 0
for _, x in pairs(_G.ocPLrunningAds or {}) do
	Yoy += 1
	task.spawn(function()
		pcall(x)
		Yay += 1 
	end)
end

repeat task.wait() until Yay >= Yoy

local par = gethui and gethui() or game.CoreGui
if par:FindFirstChild("ohno") then par.ohno:Destroy() end
local ohno = Instance.new("ScreenGui")
ohno.Name = "ohno"
ohno.IgnoreGuiInset = true
ohno.Parent = par

local function preloadJumpscare(location)
	local z = Instance.new("ImageLabel")
	z.Name = "prepre"
	z.Image = location
	z.BackgroundTransparency = 1
	z.Visible = true
	z.Size = UDim2.new(0, 100, 0, 100)
	z.Parent = ohno
	task.spawn(function()
		repeat task.wait() until z.IsLoaded
		z:Destroy()
	end)
end
local function preloadAudio(location)
	local z = Instance.new("Sound")
	z.SoundId = location
	z.Volume = 1
	z.Parent = workspace
	task.spawn(function()
		repeat task.wait() until z.IsLoaded
		z:Destroy()
	end)
end

local function getSelected()
	local b = {}
	for _, x in pairs(ui.LocalScript:GetChildren()) do
		if x.Name == "BoxSelection" then b[#b+1] = x.Adornee end
	end
	return b
end

local isFrozenKb = false
local function freezeKBs()
	isFrozenKb = true
end
local function unfreezeKBs()
	isFrozenKb = false
end

local function hstuff(path, url, id, zamn)
	if not isfile(path) then
		if id == "lol" then writefile(path, url)
		else writefile(path, HttpGet(url, id)) end
	end

	if zamn == "jumpscare" then preloadJumpscare(customast(path))
	elseif zamn == "audio" then preloadAudio(customast(path)) end
end

local function docomic()
	return HTTP:JSONEncode({
		name = "Comic Sans",
		faces = {
			{
				name = "Regular",
				weight = 400,
				style = "normal",
				assetId = customast("ocplus/other/comic.ttf")
			},
			{
				name = "Regular Italic",
				weight = 400,
				style = "italic",
				assetId = customast("ocplus/other/comici.ttf")
			},
			{
				name = "Bold",
				weight = 700,
				style = "normal",
				assetId = customast("ocplus/other/comicbd.ttf")
			},
			{
				name = "Bold Italic",
				weight = 700,
				style = "italic",
				assetId = customast("ocplus/other/comicz.ttf")
			}
		}
	})
end

task.spawn(function()
	if not isfolder("ocplus") then makefolder("ocplus") end
	if not isfolder("ocplus/images") then makefolder("ocplus/images") end
	if not isfolder("ocplus/sounds") then makefolder("ocplus/sounds") end
	if not isfolder("ocplus/download") then makefolder("ocplus/download") end
	if not isfolder("ocplus/settings") then makefolder("ocplus/settings") end
	if not isfolder("ocplus/other") then makefolder("ocplus/other") end
	if not isfolder("ocplus/addons") then makefolder("ocplus/addons") end
	
	hstuff("ocplus/other/comic.ttf", "https://raw.githubusercontent.com/nexpid/OCPlus/refs/heads/main/cdn/other/comic.ttf", "getting assets comic.ttf")
	hstuff("ocplus/other/comici.ttf", "https://raw.githubusercontent.com/nexpid/OCPlus/refs/heads/main/cdn/other/comici.ttf", "getting assets comici.ttf")
	hstuff("ocplus/other/comicbd.ttf", "https://raw.githubusercontent.com/nexpid/OCPlus/refs/heads/main/cdn/other/comicbd.ttf", "getting assets comicbd.ttf")
	hstuff("ocplus/other/comicz.ttf", "https://raw.githubusercontent.com/nexpid/OCPlus/refs/heads/main/cdn/other/comicz.ttf", "getting assets comicz.ttf")
	hstuff("ocplus/other/comic.json", docomic(), "lol")

	hstuff("ocplus/images/logo_tile.png", "https://raw.githubusercontent.com/nexpid/OCPlus/refs/heads/main/cdn/images/logo_tile.png", "getting assets ocplus_bg.png", "jumpscare")
	hstuff("ocplus/images/logo.png", "https://raw.githubusercontent.com/nexpid/OCPlus/refs/heads/main/cdn/images/logo.png", "getting assets ocplus.png", "jumpscare")

	hstuff("ocplus/images/shocked.png", "https://raw.githubusercontent.com/nexpid/OCPlus/refs/heads/main/cdn/images/shocked.png", "getting assets surprised.png", "jumpscare")
	hstuff("ocplus/sounds/violinScreech.mp3", "https://raw.githubusercontent.com/nexpid/OCPlus/refs/heads/main/cdn/sounds/violinScreech.mp3", "getting assets violinScreech.mp3", "audio")
	hstuff("ocplus/sounds/vineBoom.mp3", "https://raw.githubusercontent.com/nexpid/OCPlus/refs/heads/main/cdn/sounds/vineBoom.mp3", "getting assets vineBoom_1.mp3", "audio")
	hstuff("ocplus/sounds/lois I'm in ocplus.mp3", "https://raw.githubusercontent.com/nexpid/OCPlus/refs/heads/main/cdn/sounds/peter.mp3", "hey lois I broke the OC+ script", "audio")
end)

local function jumpscare(location, t)
	local s = Instance.new("ImageLabel", ohno)
	s.BorderSizePixel = 0
	s.Size = UDim2.new(1, 0, 1, 0)
	s.BackgroundTransparency = 1
	s.ScaleType = Enum.ScaleType.Fit
	s.Image = location
	s.ImageTransparency = 0
	t = t or 1
	TS:Create(s, TweenInfo.new(t), {
		ImageTransparency = 1
	}):Play()
	task.delay(t+0.1, function()
		s:Destroy()
	end)
end
local function playAudio(location, volume)
	local s = Instance.new("Sound")
	s.SoundId = location
	s.Volume = volume or 1
	s.Parent = game.CoreGui
	s:Play()
	s.Ended:Connect(function()
		s:Destroy()
	end)
end

local function getVersionID(a)
	local h = a:split("-")
	local n = 0

	local t = h[1]:split(".")
	for i = 1, math.floor(#t/2) do
		local j = #t - i + 1
		t[i], t[j] = t[j], t[i]
	end

	local mult = 1
	for i, x in pairs(t) do
		n = n + x*mult
		mult = mult * 10
	end

	return n
end

local classIdentifiers = {
	BackgroundColor3 = {
		Frame = true,
		ImageButton = true,
		TextButton = true,
		ImageLabel = true,
		TextLabel = true,
		ScrollingFrame = true,
		TextBox = true,
		VideoFrame = true,
		ViewportFrame = true,
	},
	TextColor3 = {
		TextButton = true,
		TextLabel = true,
		TextBox = true
	},
	ImageColor3 = {
		ViewportFrame = true,
		ImageLabel = true,
		ImageButton = true
	}
}

-- console formatting yay
task.spawn(function()
	local cons = game.CoreGui:WaitForChild("DevConsoleMaster", 1337):WaitForChild("DevConsoleWindow", 1337):WaitForChild("DevConsoleUI", 1337)
	if _G.ocPLconsole then _G.ocPLconsole:Disconnect() end
	
	local function checkCDescendant(x)
		if x.Parent.Name ~= "ClientLog" and x.Parent.Name ~= "ServerLog"  then return end
		local z = x:FindFirstChild("msg")
		if not z then return end
	
		local txt = ""
		local toUnwrite = {}
		local written = ""
		local sqNext, isSq = false, false
		local toxt = z:GetAttribute("ogtext") or z.Text
		if not z:GetAttribute("ogtext") then
			z:SetAttribute("ogtext", toxt)
			z.Text = z.Text:gsub("&", "&amp;"):gsub("'", "&apos;"):gsub("\"", "&quot;"):gsub(">", "&gt;"):gsub("<", "&lt;")
		end
	
		for _, B in pairs(toxt:split("")) do
			if sqNext then
				sqNext = false
				if B == "[" then isSq = true
				else isSq = false; txt += B end
			end
			if B == "\x1B" then sqNext = true end
	
			if not isSq and not sqNext then
				txt = txt .. B
			elseif isSq then
				if B == ";" or B == "m" then
					if B == "m" then isSq = false end
	
					local form = {
						["1"] = "b",
						["3"] = "i",
						["4"] = "u",
						["9"] = "s"
					}
					local color = {
						["30"] = "#000000",
						["31"] = "#cd3131",
						["32"] = "#0dbc79",
						["33"] = "#e5e510",
						["34"] = "#2472c8",
						["35"] = "#bc3fbc",
						["36"] = "#11a8cd",
						["37"] = "#e5e5e5",
						["90"] = "#666666",
						["91"] = "#f14c4c",
						["92"] = "#23d18b",
						["93"] = "#f5f543",
						["94"] = "#3b8eea",
						["95"] = "#d670d6",
						["96"] = "#29b8db",
						["97"] = "#e5e5e5"
					}
	
					if written == "0" then
						txt = txt .. table.concat(toUnwrite, "")
						toUnwrite = {}
					end
					for A, C in pairs(form) do
						if written == A then
							txt = txt .. "<"..C..">"
							table.insert(toUnwrite, 1, "</"..C..">")
						end
					end
					for A, C in pairs(color) do
						if written == A then
							txt = txt .. ("<font color=\"%s\">"):format(C)
							table.insert(toUnwrite, 1, "</font>")
						end
					end
	
					written = ""
				else
					if B ~= "[" then
						written = written .. B
					end
				end
			end
		end
	
		txt = txt .. table.concat(toUnwrite, "")
		
		z.RichText = true
		z.Text = txt
	end
	
	_G.ocPLconsole = cons.DescendantAdded:Connect(checkCDescendant)
	for _, x in pairs(cons:GetDescendants()) do
		checkCDescendant(x)
	end
end)

local function getKey(a)
	return UIS:GetStringForKeyCode(a)
end
local function getKeyboardKey(char)
	for _, d in pairs(Enum.KeyCode:GetEnumItems()) do
		local z = getKey(d)
		if z:lower() == char:lower() then return d end
	end
	return Enum.KeyCode.Return
end

_G.ocPLevents = _G.ocPLevents or {}
local function ev(e)
	_G.ocPLevents[#_G.ocPLevents+1] = e
end
_G.ocPLrunningAds = {}

-- cwy about it :3
local IsEditing2 = pui.IsEditing
local function doInArea(p1, p2, mode)
	local v4 = nil;
	v4 = p1.Area;
	if mode == 3 then
		local v5 = v4.Size.Z / 2 + 60;
		local v6 = v4.Size.Y / 2;
		local v7 = v4.Size.X / 2 + 20;
		return Vector3.new(math.clamp(p2.X, v4.Position.X - v7, v4.Position.X + v7), math.clamp(p2.Y, v4.Position.Y - v6 - 10, v4.Position.Y + v6 + 30), math.clamp(p2.Z, v4.Position.Z - v5, v4.Position.Z + v5));
	end;
	if mode ~= 2 then
		return;
	end;
	if IsEditing2.Value ~= true then
		local v8 = v4.Size.Z / 2;
		local v9 = v4.Size.Y / 2;
		local v10 = v4.Size.X / 2;
		return Vector3.new(math.clamp(p2.X, v4.Position.X - v10, v4.Position.X + v10), math.clamp(p2.Y, v4.Position.Y - v9, v4.Position.Y + v9 + 30), math.clamp(p2.Z, v4.Position.Z - v8, v4.Position.Z + v8));
	end;
	local v11 = v4.Size.Z / 2 + 20;
	local v12 = v4.Size.Y / 2;
	local v13 = v4.Size.X / 2;
	return Vector3.new(math.clamp(p2.X, v4.Position.X - v13, v4.Position.X + v13), math.clamp(p2.Y, v4.Position.Y - v12 - 10, v4.Position.Y + v12 + 30), math.clamp(p2.Z, v4.Position.Z - v11, v4.Position.Z + v11));
end;

local ncSpeed = 0

local oldm
local xoldPos, xoldCam
oldm = hookmetamethod(game, "__newindex", function(self, k, v)
	if _G.ocPLmetamethod == meetamethod then
		if tostring(self) == "BodyPosition" and k == "Position" then
			if xoldPos then
				local diff = v-xoldPos
				v = xoldPos+diff*ncSpeed
			end
			if pui.CurrentObby.Value then v = doInArea(pui.CurrentObby.Value, v, 2) end
			xoldPos = v
		end
	end

	return oldm(self, k, v)
end)

local doingKB = false
local adds = {}

-- Addons aONE
-- Enhancements
_G.ocPLiconz = {}
local assignA, doColorPicker, doIcons, doLoaded, plusIcon, setCopies, setObbyTimer = {}, nil, nil, nil, nil, nil, nil
-- DRpc
local setActivity, rpcA = nil, nil
-- Darkmode
_G.ocPLbackup = _G.ocPLbackup or {}
local dmed, redoThingiesOmg = {}, nil

local addons = {
	enhance = {
		title = "UI Enhancements",
		description = "Modernizes Obby Creatorâ€™s interface for better usage and clear alot of the clutter.",
		settings = {
			{
				name = "HQ Text",
				id = "textenhance",
				type = "toggle",
				description = "Makes Text higher quality."
			},
			{
				name = "Colors++",
				id = "colorpicker",
				type = "toggle",
				description = "Adds fancy features to the color picker."
			},
			{
				name = "Fancy Icons",
				id = "icons",
				type = "toggle",
				description = "Replaces OC's icons with cooler and darkmode supported icons."
			},
			{
				name = "Grid/List View",
				id = "gridlist",
				type = "toggle",
				description = "Adds a grid/list view to the Load Obby screen."
			},
			{
				name = "Maximise Text",
				id = "maxtext",
				type = "toggle",
				description = "Adds a maximise button next to the Text property."
			},
			{
				name = "More Copy Buttons",
				id = "copybtns",
				type = "toggle",
				description = "Adds more Copy buttons to the properties tab."
			},
			{
				name = "Obby Timer",
				id = "obbytimer",
				type = "toggle",
				description = "Shows how long you've been playing/editing an obby."
			}
		},
		run = {
			start = function(Util)
				Util.run.update(Util)
			end,
			update = function(Util, key)
				if not key or key == "textenhance" then
					local b = Util.data.textenhance and 2 or 1
					for x in pairs(assignA) do
						pcall(function()
							x.PixelsPerStud = 27*b
							x.CanvasSize = Vector2.new(640, 480)*b
						end)
					end
				end
		
				if not key or key == "colorpicker" then doColorPicker(Util.data.colorpicker) end
				if not key or key == "icons" then doIcons(Util.data.icons) end
				if not key or key == "gridlist" then doLoaded(Util.data.gridlist) end
				if not key or key == "maxtext" then plusIcon.Visible = Util.data.maxtext end
				if not key or key == "copybtns" then setCopies(Util.data.copybtns) end
				if not key or key == "obbytimer" then setObbyTimer(Util.data.obbytimer) end
			end,
			stop = function(Util)
				for x in pairs(assignA) do
					pcall(function()
						x.PixelsPerStud = 27
						x.CanvasSize = Vector2.new(640, 480)
					end)
				end
				doColorPicker(false)
				doIcons(false)
				doLoaded(false)
				plusIcon.Visible = false
				setCopies(false)
				setObbyTimer(false)
			end
		},
		working = true
	},
	drpc = {
		title = "Discord RPC",
		description = "Implements a new Obby Creator Discord RPC, which showcases what obby are you playing or editing.",
		settings = {},
		run = {
			start = function(Util)
				repeat task.wait() until _G.ocPLrpcW ~= nil

				if _G.ocPLrpcW == false then
					if Util.reconn and Util.reconn >= tick() then
						Util.reconn = tick()
						Util.canInteract = false
						out:Fire("Reconnecting...", Color3.new(0.75, 0.75, 0.75), 5)
						rpcA(true)
						Util.canInteract = true
						if not _G.ocPLrpcW then Util.disable() return end
					else
						Util.disable()
						Util.reconn = tick()+0.75
						return out:Fire("OC+ RPC not connected! (doube click to reconnect!)", Color3.new(1, 0.2, 0.2), 5)
					end
				end

				setActivity()
			end,
			stop = function(Util)
				setActivity()
			end
		},
		working = true
	},
	revert = {
		title = "Revert Lighting",
		description = "Reverts Obby Creator's lighting back to Compability.",
		settings = {},
		run = {
			set = function(yas)
				setscriptable(game.Lighting, "Technology", true)
				sethiddenproperty(game.Lighting, "Technology", yas
					and Enum.Technology.Compatibility
					or Enum.Technology.Future)
			end,
			start = function(Util)
				Util.run.set(true)
			end,
			stop = function(Util)
				Util.run.set(false)
			end
		},
		working = true
	},
	darkmode = {
		title = "Dark Mode",
		description = "Turns OC's UI to a gamer-friendly shade. (to be replaced by Themes!)",
		settings = {
			{
				name = "Mode",
				id = "mode",
				type = "choose",
				description = "Switch between dark mode modes.",
				choose = {"Monochrome", "Saturated"}
			}
		},
		run = {
			set = function(Util, fps, arr, a)
				Util.canInteract = false
				local i = 0
				for y, x in pairs(arr) do
					i=i+1
					for p, v in pairs(x) do
						local scs, xod = pcall(function()
							if y[p] == v then return end
							y[p] = v
						end)
					end
					
					if i % math.floor(fps) == 0 then RS.RenderStepped:Wait() end
				end

				ui.SettingsFrame.ThisFrame.MusicFrame.Back.ImageColor3 = Color3.new(a, a, a)
				Util.canInteract = true
			end,
			start = function(Util)
				Util.run.set(Util, FPS*10, dmed, 1)
			end,
			update = function(Util, key)
				if key == "mode" then
					redoThingiesOmg()
				end
			end,
			stop = function(Util)
				Util.run.set(Util, FPS*10, _G.ocPLbackup, 0)
			end
		},
		working = true
	},
	themes = {
		title = "Themes",
		description = "Implements the ability to create themes, import and export themes as JSON files, preset themes like Dark Mode and more to come.",
		settings = {},
		working = false
	},
	plugins = {
		title = "Improved Plugins",
		description = "Implements new plugins for usage such as Roblox Music, unlock paywalled plugins and more to come.",
		settings = {},
		working = false
	},
	debug = {
		title = "Debugging",
		description = "Implements a fancy console which tracks what buttons were activated.",
		settings = {},
		working = false
	},
	imparts = {
		title = "Improved Parts",
		description = "Implements the ability to group parts, lock parts and save those combinations to a JSON file.",
		settings = {},
		working = false
	},
	impremades = {
		title = "Improved Premades",
		description = "Implements the ability to export premades as JSON files, infinite local premades and more to come.",
		settings = {},
		working = false
	}
}
local adkeys = {"enhance", "drpc", "revert", "darkmode", "themes", "plugins", "debug", "imparts", "impremades"}

adds = {
	enhance = {
		enabled = false,
		textenhance = true,
		colorpicker = true,
		icons = true,
		gridlist = true,
		maxtext = true,
		copybtns = true,
		obbytimer = true,
		gridstyle = "list"
	},
	drpc = {
		enabled = false
	},
	revert = {
		enabled = false
	},
	darkmode = {
		enabled = false,
		mode = "Saturated"
	}
}
local defaultAdds = table.clone(adds)

if isfile("ocplus/settings/addons.json") then
	local yay = pcall(function()
		local newadds = HTTP:JSONDecode(readfile("ocplus/settings/addons.json"))
		for A, B in pairs(newadds) do
			adds[A] = B
		end
	end)
	if not yay then
		print("uh oh!")
	end
end

local keys = {}
for y in pairs(addons) do keys[#keys+1] = y end

for _, x in pairs(listfiles("ocplus/addons")) do
	if x:sub(-4, #x) ~= ".lua" then continue end
	local y = readfile(x)
	local addn, err = loadstring(y)
	if addn then addn = addn() end

	if addn then
		if typeof(addn) ~= "table" then err = "Addon is not a table"
		elseif typeof(addn.id) ~= "string" then err = "Addon.id is not a string"
		elseif typeof(addn.title) ~= "string" then err = "Addon.title is not a string"
		elseif typeof(addn.description) ~= "string" then err = "Addon.description is not a string"
		elseif typeof(addn.version) ~= "number" then err = "Addon.version is not a number"
		elseif typeof(addn.author) ~= "number" then err = "Addon.author is not a number"
		elseif typeof(addn.settings) ~= "table" then err = "Addon.author is not a table"
		elseif typeof(addn.data) ~= "table" then err = "Addon.author is not a table"
		elseif table.find(keys, addn.id) then err = "Cannot overwrite official addon!"
		elseif addons[addn.id] then err = "Addon with that ID already exists!" end
	end

	if err then
		warn("==================")
		warn("Failed loading addon!")
		warn("Addon source: "..x)
		warn("Loading error: "..err)
		warn("==================")
	else
		addn.community = true
		addn.working = true
		addn.data.enabled = false
		addn.path = x

		local id = addn.id..""
		defaultAdds[id] = addn.data
		if not adds[id] then adds[id] = addn.data end
		addons[id] = addn
	end
end

local function doSettingsUI(redo)
	ui.SettingsFrame.Back.Size = UDim2.new(1, 0, 1+redo*2, 0)
	ui.SettingsFrame.Back.Position = UDim2.new(0.5, 0, 0.5, 0)
	ui.SettingsFrame.Back.AnchorPoint = Vector2.new(0.5, 0.5)
	ui.SettingsFrame.ThisFrame.Position = UDim2.new(0.5, 0, -redo, 0)
	ui.SettingsFrame.ThisFrame.AnchorPoint = Vector2.new(0.5, 0)
	ui.SettingsFrame.TextLabel.Position = UDim2.new(0.5, 0, -redo, 0)

	ui.SettingsFrame.ClearButton.Position = UDim2.new(0.75, 0, 0.94+redo, 0)
	ui.SettingsFrame.RevertButton.Position = UDim2.new(0.75, 0, 0.85+redo, 0)
	ui.SettingsFrame.PermissionButton.Position = UDim2.new(0.75, 0, 0.76+redo, 0)
	ui.SettingsFrame.TutorialButton.Position = UDim2.new(0.75, 0, 0.67+redo, 0)
	if ui.SettingsFrame:FindFirstChild("OCPlusReload") then
		ui.SettingsFrame.OCPlusReload.Position = UDim2.new(0.75, 0, 0.58+redo, 0)
	end

	ui.SettingsFrame.Close.Position = UDim2.new(1, -5, -redo, 5)

	ui.SettingsFrame.DataUsedFrame.Position = UDim2.new(-0.075, 0, 0.4+redo/2, 0)
	ui.SettingsFrame.TotalCostLabel.Position = UDim2.new(-0.025, 0, 0.85+redo/2, 0)
end

-- Reverting numero dos
task.wait()

CAS:UnbindAction("Keybinds")
if ui.PartCount:FindFirstChild("Timer") then ui.PartCount.Timer:Destroy() end
if ldo.CurrentObby:FindFirstChild("Timer") then ldo.CurrentObby.Timer:Destroy() end
if propsTxt:FindFirstChild("Plus") then propsTxt.Plus:Destroy() end
if ui:FindFirstChild("PlusBig") then ui.PlusBig:Destroy() end
if ldo.LoadFrame:FindFirstChild("ViewList") then ldo.LoadFrame.ViewList:Destroy() end
if ldo.LoadFrame:FindFirstChild("ViewGrid") then ldo.LoadFrame.ViewGrid:Destroy() end
if ui.SettingsFrame.ThisFrame:FindFirstChild("Addons") then ui.SettingsFrame.ThisFrame.Addons:Destroy() end
if ui.SettingsFrame.ThisFrame:FindFirstChild("Keybinds") then ui.SettingsFrame.ThisFrame.Keybinds:Destroy() end
if ui.SettingsFrame.ThisFrame:FindFirstChild("NoclipSpeed") then ui.SettingsFrame.ThisFrame.NoclipSpeed:Destroy() end
if ui.SettingsFrame:FindFirstChild("OCPlusReload") then ui.SettingsFrame.OCPlusReload:Destroy() end
if ui:FindFirstChild("AddonsFrame") then ui.AddonsFrame:Destroy() end
if ui:FindFirstChild("KeybindsFrame") then ui.KeybindsFrame:Destroy() end
if props.ColorPicker:FindFirstChild("cstuff") then props.ColorPicker.cstuff:Destroy() end
for _, x in pairs(_G.ocPLevents) do x:Disconnect() end
_G.ocPLevents = {}
for _, x in pairs(props.ScrollingFrame:GetDescendants()) do
	if x.Name == "CopyButton" then x:Destroy() end
end
for x, y in pairs(_G.ocPLiconz) do x.Image = y end
doSettingsUI(0)
task.wait()

-- o
ev(RS.Heartbeat:Connect(function()
	if not plr.Character or not plr.Character:FindFirstChild("BodyPosition", true) then
		xoldPos = nil
	end

	if workspace.CurrentCamera.CameraType ~= Enum.CameraType.Scriptable then
		xoldCam = nil
	end
end))

-- UI (1)
task.wait()

-- key is either a Enum.KeyCode.X.Name or Enum.ModifierKey.X.Name
local keybinds = {
	["Edit > Build Mode"] = {"One"},
	["Edit > Fly Mode"] = {"Two"},
	["Edit > Cam Mode"] = {"Three"},
	["Edit > Switch Mode Back"] = {"Q"},
	["Edit > Switch Mode"] = {"E"},
	["Edit > Delete"] = {"Delete"},
	["Edit > Tilt/Teleport"] = {"T"},
	["Edit > Rotate"] = {"R"},
	["Edit > Duplicate Objects"] = {"Ctrl", "C"},
	["Noclip > Fly Up"] = {"C"},
	["Noclip > Fly Down"] = {"Z"}
}
local defaultKeybinds = table.clone(keybinds)
local order = {"Edit > Build Mode", "Edit > Fly Mode", "Edit > Cam Mode", "Edit > Switch Mode Back", "Edit > Switch Mode", "Edit > Delete", "Edit > Tilt/Teleport", "Edit > Rotate", "Edit > Duplicate Objects", "Noclip > Fly Up", "Noclip > Fly Down"}

local function hasKeybind(kb, ignore, ignoreB)
	for a, b in pairs(keybinds) do
		if ignore == a then continue end
		if b[#b] == kb then return true end
	end
	for a, b in pairs(adds) do
		local add = addons[a]
		local setss = add.settings or {}
		for _, c in pairs(b) do
			local sett = setss[c]
			if not sett then continue end
	
			if ignoreB == a and ignore == c then continue end
			if sett == kb then return true end
		end
	end

	return false
end

if isfile("ocplus/settings/keybinds.json") then
	local yay = pcall(function()
		local newkeybs = HTTP:JSONDecode(readfile("ocplus/settings/keybinds.json"))
		for A, B in pairs(newkeybs) do
			if not keybinds[A] then continue end
			keybinds[A] = B
		end
	end)
	if not yay then
		print("uh oh! 2")
	end
end

-- Keybinds
local function reloadKeybinds()
	CAS:UnbindAction("Keybinds")
	local deafK = {
		"Keybinds",
		function() return Enum.ContextActionResult.Sink end,
		false,
		2001,
		Enum.KeyCode.One,
		Enum.KeyCode.Two,
		Enum.KeyCode.Three,
		Enum.KeyCode.Q,
		Enum.KeyCode.E,
		Enum.KeyCode.Delete,
		Enum.KeyCode.T,
		Enum.KeyCode.C,
		Enum.KeyCode.Z
	}
	for _, x in pairs(keybinds) do
		if not table.find(deafK, x) then deafK[#deafK+1] = Enum.KeyCode[x[#x]] end
	end
	
	CAS:BindActionAtPriority(unpack(deafK))
end
reloadKeybinds()

local ignorekeyrn = {}

local function runEr(k, typE)
	if ignorekeyrn[k.KeyCode] then return end
	if UIS:GetFocusedTextBox() then return end
	if isFrozenKb then return end

	local function checkFor(d)
		local zaza = keybinds[d]
		local is = true

		for i, br in pairs(zaza) do
			if not is then break end
			if i == #zaza then is = Enum.KeyCode[br] == k.KeyCode
			else is = k:IsModifierKeyDown(Enum.ModifierKey[br]) end
		end

		return is
	end
	local function keyEvent(st, dadada)
		local troll = typE == Enum.UserInputState.Begin

		if st.EnumType == Enum.KeyCode then
			VIM:SendKeyEvent(troll, st, false, game)
		elseif st == Enum.UserInputType.MouseButton1 then
			VIM:SendMouseButtonEvent(0, 0, 0, troll, game, 1)
		elseif st == Enum.UserInputType.MouseButton2 then
			VIM:SendMouseButtonEvent(0, 0, 1, troll, game, 1)
		end
	end
	local function thingy(st, ...)
		CAS:UnbindAction("Keybinds")
		local alsohold = {...}
		for _, xa in pairs(alsohold) do
			keyEvent(xa)
		end

		ignorekeyrn[st] = true
		keyEvent(st)
		task.wait(0.03)
		ignorekeyrn[st] = false
		reloadKeybinds()
	end

	if checkFor("Edit > Switch Mode Back") then
		CAS:CallFunction("SwitchModeBack", typE, k)
	elseif checkFor("Edit > Switch Mode") then
		CAS:CallFunction("SwitchMode", typE, k)
	elseif checkFor("Edit > Delete") then
		CAS:CallFunction("Delete", typE, k)
	elseif checkFor("Edit > Tilt/Teleport") then
		CAS:CallFunction("Tilt/Teleport", typE, k)
	elseif checkFor("Edit > Rotate") then
		CAS:CallFunction("Rotate", typE, k)
	end

	local isCam = workspace.CurrentCamera.CameraType == Enum.CameraType.Scriptable

	if checkFor("Edit > Build Mode") then thingy(Enum.KeyCode.One)
	elseif checkFor("Edit > Fly Mode") then thingy(Enum.KeyCode.Two)
	elseif checkFor("Edit > Cam Mode") then thingy(Enum.KeyCode.Three)
	elseif checkFor("Noclip > Fly Up") and isCam then thingy(Enum.KeyCode.C)
	elseif checkFor("Noclip > Fly Down") and isCam then thingy(Enum.KeyCode.Z)
	elseif checkFor("Edit > Duplicate Objects") then thingy(Enum.KeyCode.C, Enum.KeyCode.LeftControl) end
end

ev(UIS.InputBegan:Connect(function(k)
	runEr(k, k.UserInputState)
end))
ev(UIS.InputEnded:Connect(function(k)
	runEr(k, k.UserInputState)
end))

local oldcache = {}
local palettes = {}
local tosave = {
	{adds, "addons"},
	{keybinds, "keybinds"},
	{palettes, "palettes"}
}
for _, x in pairs(tosave) do
	oldcache[x[2]] = ""
end

local function zdigital(x)
	local sec = x%60
	local min = math.floor(x/60)%60
	local hur = math.floor(x/3600)

	return ("%s:%s:%s"):format(
		("0"..tostring(hur)):sub(-2),
		("0"..tostring(min)):sub(-2),
		("0"..tostring(sec)):sub(-2)
	)
end

local timerAe, timerAs
local timerBe, timerBs
ev(RS.RenderStepped:Connect(function(delay)
	FPS = 1/delay
	for i, x in pairs(_G.ocPLevents) do
		if not x.Connected then
			table.remove(_G.ocPLevents, i)
		end
	end

	for _, x in pairs(tosave) do
		local Ecash = oldcache[x[2]]
		local Exo = HTTP:JSONEncode(x[1])

		if Ecash ~= Exo then
			writefile("ocplus/settings/"..x[2]..".json", Exo)
		end
	end
	for _, x in pairs(tosave) do
		oldcache[x[2]] = HTTP:JSONEncode(x[1])
	end

	if timerAe then timerAe.Text = ("Editing Timer: %s"):format(zdigital(timerAs and math.floor(tick()-timerAs) or 0)) end
	if timerBe then timerBe.Text = ("Playing Timer: %s"):format(zdigital(timerBs and math.floor(tick()-timerBs) or 0)) end

	ncSpeed = (UIS:IsKeyDown(Enum.KeyCode.LeftShift) or UIS:IsKeyDown(Enum.KeyCode.RightShift)) and 1 or _G.ocPLncSpeed
end))
task.wait()

local oplusSetting = ui.SettingsFrame.TutorialButton:Clone()
oplusSetting.Name = "OCPlusReload"
oplusSetting.Position = UDim2.new(0.75, 0, 0.58, 0)
oplusSetting.TextLabel.Text = "Reload OC+"
oplusSetting.Back.ImageColor3 = accent
oplusSetting.Parent = ui.SettingsFrame

local function registerSetting(element, rgs, lt)
	task.spawn(function()
		if lt then
			for i = 1, lt do
				task.wait()
			end
		end
		rgs(false)
		ev(element.TextButton.Activated:Connect(rgs))
	end)
end

doSettingsUI(0)

addonsFr.Visible = false
addonsFr.Name = "AddonsFrame"
addonsFr.Parent = ui

-- FIX x3
--[[addonsFr.properties.ScrollingFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
addonsFr.properties.ScrollingFrame.ScrollBarThickness = 0
addonsFr.properties.ScrollingFrame.example.Size = UDim2.new(1, 0, 0.145, 0)
addonsFr.properties.ScrollingFrame.example.toggle.ImageColor3 = Color3.new()
addonsFr.properties.ScrollingFrame.example.toggle.Size = UDim2.new(0.75, 0, 0.75, 0)
addonsFr.properties.ScrollingFrame.example.toggle.SizeConstraint = Enum.SizeConstraint.RelativeYY
local gfdgfdgfdgdfgdfgdfgdgdfgdfgdfg = Instance.new("UIListLayout", addonsFr.properties.ScrollingFrame)
gfdgfdgfdgdfgdfgdfgdgdfgdfgdfg.HorizontalAlignment = Enum.HorizontalAlignment.Center
gfdgfdgfdgdfgdfgdfgdgdfgdfgdfg.SortOrder = Enum.SortOrder.LayoutOrder
gfdgfdgfdgdfgdfgdfgdgdfgdfgdfg.Padding = UDim.new(0, 4)
addonsFr.ScrollingFrame.ExampleFrame.Info.Icon.ImageColor3 = Color3.new(1, 1, 1)]]
addonsFr.ScrollingFrame.ExampleFrame.Info.Info.author.TextTransparency = 0.5
addonsFr.ScrollingFrame.ExampleFrame.Info.Info.description.TextYAlignment = Enum.TextYAlignment.Top
addonsFr.loading.BackgroundTransparency = 1

local addonEx = addonsFr.ScrollingFrame.ExampleFrame:Clone()
addonEx.Visible = true
addonsFr.ScrollingFrame.ExampleFrame:Destroy()

local addonCt = addonsFr.ScrollingFrame.ExampleCategory:Clone()
addonCt.Visible = true
addonsFr.ScrollingFrame.ExampleCategory:Destroy()

for _, br in pairs(addonsFr.properties.ScrollingFrame.example:GetChildren()) do
	if br.Name ~= "title" and br.name ~= "description" then br.Visible = false end
end
local addonPr = addonsFr.properties.ScrollingFrame.example:Clone()
addonPr.Visible = false
addonsFr.properties.ScrollingFrame.example:Destroy()

keybindsFr.Visible = false
keybindsFr.Name = "KeybindsFrame"
keybindsFr.Parent = ui

local keybindEx = keybindsFr.List.example:Clone()
keybindEx.Visible = true
keybindsFr.List.example:Destroy()

-- FIX x3
keybindsFr.UIAspectRatioConstraint.AspectRatio = 1.5
keybindEx.Size = UDim2.new(1, 0, 0.09, 0)

-- Keybinds!! :DD
-- also on first RenderStepped smh

local unkeybind
for id in pairs(keybinds) do
	local function x()
		return keybinds[id]
	end
	local i = table.find(order, id)
	local br = keybindEx:Clone()
	br.LayoutOrder = i
	br.label.Text = id
	br.key.Text = table.concat(x(), " + ")
	br.BackgroundTransparency = i % 2 == 0 and 1 or 0.85

	local doang = false
	ev(br.key.Activated:Connect(function()
		local no = false
		if doang then no = true end
		if unkeybind then unkeybind() end

		freezeKBs()

		if no then return end
		doang = true

		local ois
		local change = {}
		unkeybind = function()
			ois:Disconnect()
			if change[1] then keybinds[id] = change end
			br.key.Text = table.concat(x(), " + ")
			doang = false
			reloadKeybinds()
			unfreezeKBs()
		end

		br.key.Text = "..."

		ois = UIS.InputBegan:Connect(function(IN)
			if ignorekeyrn[IN.KeyCode] then return end
			if UIS:GetFocusedTextBox() then return end

			if table.find({
				Enum.KeyCode.LeftControl,
				Enum.KeyCode.RightControl,
				Enum.KeyCode.LeftAlt,
				Enum.KeyCode.RightAlt,
				Enum.KeyCode.LeftShift,
				Enum.KeyCode.RightShift,

				Enum.KeyCode.Unknown
			}, IN.KeyCode) then return end

			change = {}
			local function untok(x)
				if table.find(change, x.Name) then return end
				change[#change+1] = x.Name
				br.key.Text = table.concat(change, " + ")
			end

			if hasKeybind(IN.KeyCode, id) then return out:Fire("Keybind already in use!", Color3.new(1, 0.2, 0.2), 5) end

			if IN:IsModifierKeyDown(Enum.ModifierKey.Ctrl) then untok(Enum.ModifierKey.Ctrl) end
			if IN:IsModifierKeyDown(Enum.ModifierKey.Shift) then untok(Enum.ModifierKey.Shift) end
			if IN:IsModifierKeyDown(Enum.ModifierKey.Alt) then untok(Enum.ModifierKey.Alt) end

			untok(IN.KeyCode)

			unkeybind()
		end)
		ev(ois)
	end))
	br.Parent = keybindsFr.List
end

local yippies = {
	"BUILT-IN ADDONS",
	"WIP BUILT-IN ADDONS",
	"DOWNLOADED ADDONS",
	"WIP DOWNLOADED ADDONS"
}

local rinstalled = {}
local rbrowser = {}

local checkImags = {
	[false] = "rbxassetid://11940222285",
	[true] = "rbxassetid://2790552399"
}

local dudeLol = {}
local function loadUpPropsYuh(addon, Util, onUpdate)
	addonsFr.properties.Visible = not not addon
	addonsFr.switcher.Visible = not addon
	addonsFr.ScrollingFrame.Visible = not addon
	addonsFr.Subtitle.Visible = not addon
	addonsFr.Title.Visible = not addon

	for _, b in pairs(addonsFr.properties.ScrollingFrame:GetChildren()) do
		if b:IsA("Frame") then b:Destroy() end
	end

	if addon and Util and onUpdate then
		addonsFr.properties.Title.Text = ("%s â€” properties"):format(addon.title)
		for i, db in pairs(addon.settings) do
			local ex = addonPr:Clone()
			ex.Name = db.id
			ex.title.Text = db.name
			ex.LayoutOrder = i
			ex.description.Text = db.description
			ex.Visible = true
			ex.Parent = addonsFr.properties.ScrollingFrame

			local val = Util.data[db.id]

			if db.type == "toggle" then
				if val ~= true and val ~= false then val = false end
				ex.toggle.Visible = true
				ex.toggle.Image = checkImags[val]
				ev(ex.toggle.Activated:Connect(function()
					val = not val
					ex.toggle.Image = checkImags[val]
					Util.data[db.id] = val
					onUpdate(db.id)
				end))
			elseif db.type == "choose" then
				local btn = ex.choose.list.btn:Clone()
				btn.Visible = true
				ex.choose.list.btn:Destroy()
				
				local isOpen = false
				for i, b in pairs(db.choose) do
					local jojo = btn:Clone()
					jojo.Name = b
					jojo.Text = b
					jojo.LayoutOrder = i
					jojo.Parent = ex.choose.list
					ev(jojo.Activated:Connect(function()
						isOpen = false
						ex.choose.list.Visible = false

						val = b
						ex.choose.Text = val
						Util.data[db.id] = val
						onUpdate(db.id)
					end))
				end

				ex.choose.Visible = true
				ex.choose.Text = val
				ev(ex.choose.Activated:Connect(function()
					isOpen = not isOpen
					ex.choose.list.Visible = isOpen
				end))
			elseif db.type == "string" then
				ex.string.Visible = true
				ex.string.Text = tostring(val)
				local minn, maxx = (db.minVal or 0), (db.maxVal or 999999999)
				ev(ex.string.FocusLost:Connect(function()
					local toxt = ex.string.Text
					if #toxt < minn then ex.string.Text = val; return end
					val = toxt:sub(1, maxx)
					ex.string.Text = val
					Util.data[db.id] = val
					onUpdate(db.id)
				end))
				dudeLol[#dudeLol+1] = ex.string
			elseif db.type == "number" then
				ex.number.Visible = true
				ex.number.number.Text = tostring(tonumber(val) or 0)
				local minn, maxx = (db.minVal or -999999999), (db.maxVal or 999999999)

				local function enter(dd, cc, num)
					num = num or tonumber(ex.number.number.Text)
					if not num then ex.number.number.Text = tostring(val); return end
					val = math.max(math.min(num, maxx), minn)
					val = math.floor(val*1000)/1000
					ex.number.number.Text = tostring(val)
					Util.data[db.id] = val
					onUpdate(db.id)
				end
				ev(ex.number.number.FocusLost:Connect(enter))
				ev(ex.number.down.Activated:Connect(function()
					local num = tonumber(ex.number.number.Text)
					if not num then return end

					num = ((num*10)-1)/10
					enter(false, false, num)
				end))
				ev(ex.number.up.Activated:Connect(function()
					local num = tonumber(ex.number.number.Text)
					if not num then return end

					num = ((num*10)+1)/10
					enter(false, false, num)
				end))
			elseif db.type == "keybind" then
				ex.keybind.Visible = true
				ex.keybind.Text = tostring(val)

				local isActive = false

				ev(UIS.InputBegan:Connect(function(k)
					if not isActive then return end
					if ignorekeyrn[k.KeyCode] then return end
					if UIS:GetFocusedTextBox() then return end
		
					if table.find({
						Enum.KeyCode.LeftControl,
						Enum.KeyCode.RightControl,
						Enum.KeyCode.LeftAlt,
						Enum.KeyCode.RightAlt,
						Enum.KeyCode.LeftShift,
						Enum.KeyCode.RightShift,
		
						Enum.KeyCode.Unknown
					}, k.KeyCode) then return end

					if hasKeybind(k.KeyCode, addon.id, db.id) then return out:Fire("Keybind already in use!", Color3.new(1, 0.2, 0.2), 5) end

					isActive = false
					val = tostring(k.KeyCode.Name)
					ex.keybind.Text = val

					task.wait()
					Util.data[db.id] = val
					onUpdate(db.id)

					task.wait()
					unfreezeKBs()
				end))
				ev(ex.keybind.Activated:Connect(function()
					isActive = not isActive

					if isActive then
						freezeKBs()
						ex.keybind.Text = "..."
					else
						unfreezeKBs()
						ex.keybind.Text = tostring(val)
					end
				end))
			end
		end
	end
end
loadUpPropsYuh(false)

ev(RS.RenderStepped:Connect(function()
	addonsFr.loading.Rotation += 7
	local text = UIS:GetFocusedTextBox()

	for i, x in pairs(dudeLol) do
		if not x.Parent then dudeLol[i] = nil
		else
			if x.Name == "description" then
				x.const.MaxTextSize = x.AbsoluteSize.Y/2
			else
				x.TextScaled = text ~= x
				x.TextSize = x.AbsoluteSize.Y*0.8
				if text == x then
					x.AutomaticSize = Enum.AutomaticSize.X
				else
					x.AutomaticSize = Enum.AutomaticSize.None
				end
			end
		end
	end
end))

local addies = {}
local allDone = false
local shouldNotPcall = true
local J = 0
for id, x in pairs(addons) do
	local I = table.find(adkeys, id)
	if not I then J += 1; I = J end

	if not x.community and x.working then I += 0
	elseif not x.community and not x.working then I += 1000
	elseif x.community and x.working then I += 2000
	elseif x.community and not x.working then I += 3000 end

	local ha = addonEx:Clone()
	ha.Name = id
	ha.Info.Icon.Image = x.icon and ("rbxassetid://"..x.icon) or customast("ocplus/images/logo.png")
	ha.Info.Info.title.Text = x.title
	ha.Info.Info.description.Text = x.description
	ha.Parent = addonsFr.ScrollingFrame
	ha.LayoutOrder = I
	rinstalled[#rinstalled+1] = ha

	if x.author then
		ha.Info.Info.title.Size = UDim2.new(1, 0, 0.35, 0)
		ha.Info.Info.Position = UDim2.new(0, 0, 0.35, 0)
		ha.Info.Info.description.Size = UDim2.new(1, 0, 0.45, 0)
		ha.Info.Info.author.Visible = true
		cacheUsername(x.author, function(username)
			ha.Info.Info.author.Text = ("Developed by %s"):format(username)
		end)
	end

	if x.working then
		local aod = adds[id] or {}
		if aod.enabled ~= true and aod.enabled ~= false then aod.enabled = false end

		for jj, b in pairs(defaultAdds[id] or {}) do
			if aod[jj] == nil then aod[jj] = b end
		end
	
		local color = tostring(Random.new():NextNumber() > 0.5 and math.random(30, 37) or math.random(90, 97))
		local events = {}
		x.run = x.run or {}

		local function Src(x)
			return x and ("-"..tostring(x)) or ""
		end
	
		local Util = {
			data = aod,
			run = x.run,
			log = function(msg, src)
				src = Src(src)
				print(("\x1B[94m[LOG \x1B[0;%sm%s%s]:\x1B[0m %s"):format(tostring(color), id, src, tostring(msg)))
			end,
			warn = function(msg, src)
				src = Src(src)
				print(("\x1B[93m[WARN \x1B[0;%sm%s%s]:\x1B[0m %s"):format(tostring(color), id, src, tostring(msg)))
			end,
			error = function(msg, src)
				src = Src(src)
				print(("\x1B[91m[ERROR \x1B[0;%sm%s%s]:\x1B[0m %s"):format(tostring(color), id, src, tostring(msg)))
			end,
			addEvent = function(id, Ev)
				ev(Ev)
				if not events[id] then events[id] = Ev end
			end,
			removeEvent = function(id)
				if events[id] then
					events[id]:Disconnect()
					events[id] = nil
				end
			end,
			removeAllEvents = function()
				for id, x in pairs(events) do
					x:Disconnect()
					events[id] = nil
				end
			end,
			canInteract = true
		}
	
		if not Util.run.start then Util.warn("No start runner function.") end
		if not Util.run.stop then Util.warn("No stop runner function.") end
	
		local function isolate(f, x, cb, ...)
			if shouldNotPcall then
				f(...)
			else
				local scs, err = pcall(f, ...)
				if not scs then Util.error(err, x) end
			end
		end
		
		local function fullStop(cb)
			if Util.run.stop then isolate(Util.run.stop, "stop", function()
				if cb then enable() end
			end, Util) end
		end
		local function enable()
			_G.ocPLrunningAds[id] = function()
				if not Util.run.stop then return end
				return Util.run.stop(Util)
			end

			ha.Toggle.img.Image = checkImags[true]
			Util.data.enabled = true
			if Util.run.start then isolate(Util.run.start, "start", function()
				Util.disable()
			end, Util) end
		end
		Util.disable = function()
			_G.ocPLrunningAds[id] = nil

			ha.Toggle.img.Image = checkImags[false]
			Util.data.enabled = false
			Util.removeAllEvents()
			fullStop(true)
		end
		table.insert(addies, function(k)
			if isFrozenKb then return end
			if not Util.data.enabled then return end
			if Util.run.input then isolate(Util.run.input, "input", function() end, Util, k) end
		end)
	
		ha.Toggle.img.Image = checkImags[Util.data.enabled]
		ha.Toggle.Activated:Connect(function()
			if not Util.canInteract then return end
			if Util.data.enabled then Util.disable()
			else enable() end
		end)

		local setts = 0
		for _, x in pairs(x.settings) do
			setts += 1
		end

		ha.Config.Visible = setts ~= 0
		ha.Config.Activated:Connect(function()
			if not Util.canInteract then return end
			loadUpPropsYuh(x, Util, function(key)
				if not Util.data.enabled then return end
				if Util.run.update then isolate(Util.run.update, "update", function() end, Util, key) end
			end)
		end)
		
		if Util.data.enabled then
			task.spawn(function()
				repeat task.wait() until allDone
				for iI = 1, J do task.wait() end
				enable()
			end)
		end

		if x.github then
			ha.Info.Icon.update.Visible = true
			local canUpdate = true
			ev(ha.Info.Icon.update.Activated:Connect(function()
				if not canUpdate then return end
				canUpdate = false

				out:Fire("Checking for updates...", Color3.new(0.8, 0.8, 0.8), 5)

				local resp = HttpGet(x.github, ("fetching new update for addon %s"):format(x.id))
				if not resp then return end
				
				local addn, err = loadstring(resp)
				if addn then addn = addn() end
				if err then err = "Parsing Error: "..err end

				if addn then
					if typeof(addn) ~= "table" then err = "Error: Addon isn't a table"
					elseif typeof(addn.version) ~= "number" then err = "Error: Version isn't a number" end

					if addn.version > x.version then
						out:Fire(("New update! %s > %s. Reload OC+ to apply!"):format(tostring(x.version), tostring(addn.version)), Color3.new(0.4, 0.4, 1), 5)
						if x.path then
							writefile(x.path, resp)
						end
					elseif addn.version < x.version then
						out:Fire(("You are on a newever version! (%s > %s)"):format(tostring(x.version), tostring(addn.version)), Color3.new(0.4, 0.4, 1), 5)
					else
						out:Fire(("No new update!"):format(tostring(x.version), tostring(addn.version)), Color3.new(0.8, 0.8, 0.8), 5)
					end
				end

				if err then
					out:Fire("Failed to check!", Color3.new(1, 0.2, 0.2), 5)
					out:Fire(err, Color3.new(1, 0.2, 0.2), 5)
				end
				canUpdate = true
			end))
		end
	else
		ha.Config.Visible = false
		ha.Toggle.Visible = false
		ha.Info.Info.title.TextTransparency = 0.5
		ha.Info.Info.description.TextTransparency = 0.5
	end
end

local roha = "â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”"

for i, ya in pairs(yippies) do
	local from = (i-1)*1000
	local to = i*1000

	local isOpen = true
	local elements = {}
	for _, x in pairs(addonsFr.ScrollingFrame:GetChildren()) do
		if x:IsA("Frame") and x.LayoutOrder >= from and x.LayoutOrder < to then
			elements[#elements+1] = x
		end
	end
	if not elements[1] then continue end

	local ha = addonCt:Clone()

	local function render()
		local emoji = isOpen and "â–¼" or "â–²"
		ha.Text = ("%s    %s    %s (%s)    %s    %s"):format(roha, emoji, ya, tostring(#elements), emoji, roha)
		for _, z in pairs(elements) do
			z.Visible = isOpen
		end
	end
	render()

	ha.Name = ya
	ha.LayoutOrder = from
	ha.Parent = addonsFr.ScrollingFrame
	rinstalled[#rinstalled+1] = ha

	ev(ha.Activated:Connect(function()
		isOpen = not isOpen
		render()
	end))
end

local curra
local firstBTab = true
local loadedBrowser = true
local function switchATab(tabbo)
	curra = tabbo
	for _, x in pairs(addonsFr.switcher:GetChildren()) do
		if not x:IsA("TextButton") then continue end
		local b = x.Name == tabbo and 0.76 or 0.98
		x.BackgroundColor3 = Color3.new(b, b, b)
	end
	
	for _, bro in pairs(rinstalled) do
		bro.Parent = tabbo == "installed" and addonsFr.ScrollingFrame or nil
	end
	for _, bro in pairs(rbrowser) do
		bro.Parent = tabbo == "browser" and addonsFr.ScrollingFrame or nil
	end
	addonsFr.loading.Visible = taboo == "browser" and not loadedBrowser

	if tabbo == "browser" then
		if firstBTab then
			firstBTab = false
			addonsFr.loading.Visible, loadedBrowser = true, false

			local browse = HttpGet(ocpAPI.."api/get-addons", "getting browser addons")
			if not browse then firstBTab, loadedBrowser = true, true; return end
			browse = HTTP:JSONDecode(browse)

			local browsed = {}
			for _, x in pairs(browse) do
				local suc, body = pcall(Req, {
					Url = "https://raw.githubusercontent.com/nexpid/OCPlus/main/addons/"..x.file
				})
				print(suc, body)
				if not suc then continue end
				if body and not body.Success then continue end

				local addn, err = loadstring(body.Body)
				print(err, addn)
				if err or not addn then continue end

				local scs, data = pcall(addn)
				print(scs)
				if not scs then continue end

				data.Body = body.Body
				data.File = x.file
				browsed[#browsed+1] = data
			end

			addonsFr.loading.Visible, loadedBrowser = false, true

			for _, x in pairs(browsed) do
				local ha = addonEx:Clone()
				ha.Name = x.id
				ha.Info.Icon.Image = x.icon and ("rbxassetid://"..x.icon) or customast("ocplus/images/logo.png")
				ha.Info.Info.title.Text = x.title
				ha.Info.Info.description.Text = x.description
				ha.Parent = addonsFr.ScrollingFrame
				ha.LayoutOrder = I
				rbrowser[#rbrowser+1] = ha
			
				if x.author then
					ha.Info.Info.title.Size = UDim2.new(1, 0, 0.35, 0)
					ha.Info.Info.Position = UDim2.new(0, 0, 0.35, 0)
					ha.Info.Info.description.Size = UDim2.new(1, 0, 0.45, 0)
					ha.Info.Info.author.Visible = true
					cacheUsername(x.author, function(username)
						ha.Info.Info.author.Text = ("Developed by %s"):format(username)
					end)
				end

				ha.Config.Visible = false
				ha.Toggle.img.Image = "http://www.roblox.com/asset/?id=12318052591"
				ha.Toggle.img.Size = UDim2.new(0.75, 0, 0.75, 0)
				local downloaded = not not addons[x.id]
				ev(ha.Toggle.Activated:Connect(function()
					if downloaded then out:Fire("Addon already downloaded!", Color3.new(1, 0.2, 0.2), 5) return end
					downloaded = true
					out:Fire("Downloading...", Color3.new(0.5, 0.5, 1), 5)
					task.wait()
					writefile(("ocplus/addons/"..x.File), x.Body)
					task.wait()
					out:Fire("Downloaded! Reload OC+ to apply.", Color3.new(0.5, 0.5, 1), 5)
				end))
			end
		end
	end
end
switchATab("installed")

for _, x in pairs(addonsFr.switcher:GetChildren()) do
	if not x:IsA("TextButton") then continue end
	ev(x.Activated:Connect(function()
		if curra == x.Name then return end
		switchATab(x.Name)
	end))
end

ev(UIS.InputBegan:Connect(function(k)
	if ignorekeyrn[k.KeyCode] then return end
	if UIS:GetFocusedTextBox() then return end

	if k.KeyCode ~= Enum.KeyCode.Unknown then
		for _, x in pairs(addies) do
			x(k)
		end
	end
end))

local addonsSet = ui.SettingsFrame.ThisFrame.DragEnabled:Clone()
addonsSet.TextLabel:Destroy()
addonsSet.TextButton.LocalScript:Destroy()
addonsSet.Update:Destroy()
addonsSet.Name = "Addons"
addonsSet.Position = UDim2.new(0.545, 0, 0.15, 0)
addonsSet.Size = UDim2.new(0.415, 0, 0.075, 0)
addonsSet.TextButton:ClearAllChildren()
addonsSet.TextButton.Position = UDim2.new()
addonsSet.TextButton.Size = UDim2.new(1, 0, 1, 0)
addonsSet.TextButton.AnchorPoint = Vector2.new()
addonsSet.TextButton.Text = "Addons"
addonsSet.TextButton.TextColor3 = Color3.new(0, 0, 0)
addonsSet.Parent = ui.SettingsFrame.ThisFrame
ev(addonsSet.TextButton.Activated:Connect(function()
	if addonsFr.Visible then
		chf:Fire()
		addonsFr.Visible = false
	else
		chf:Fire(true, addonsFr)
		addonsFr.Visible = true
	end
end))

ev(addonsFr.Close.Activated:Connect(function()
	if addonsFr.properties.Visible then
		loadUpPropsYuh(false)
	else
		addonsFr.Visible = false
		chf:Fire(true, ui.SettingsFrame)
		ui.SettingsFrame.Visible = true
	end
end))

local keybindsSet = ui.SettingsFrame.ThisFrame.DragEnabled:Clone()
keybindsSet.TextLabel:Destroy()
keybindsSet.TextButton.LocalScript:Destroy()
keybindsSet.Update:Destroy()
keybindsSet.Name = "Keybinds"
keybindsSet.Position = UDim2.new(0.545, 0, 0.275, 0)
keybindsSet.Size = UDim2.new(0.415, 0, 0.075, 0)
keybindsSet.TextButton:ClearAllChildren()
keybindsSet.TextButton.Position = UDim2.new()
keybindsSet.TextButton.Size = UDim2.new(1, 0, 1, 0)
keybindsSet.TextButton.AnchorPoint = Vector2.new()
keybindsSet.TextButton.Text = "Keybinds"
keybindsSet.TextButton.TextColor3 = Color3.new(0, 0, 0)
keybindsSet.Parent = ui.SettingsFrame.ThisFrame
ev(keybindsSet.TextButton.Activated:Connect(function()
	if keybindsFr.Visible then
		chf:Fire()
		keybindsFr.Visible = false
	else
		chf:Fire(true, keybindsFr)
		keybindsFr.Visible = true
	end
end))

ev(keybindsFr.Close.Activated:Connect(function()
	keybindsFr.Visible = false
	chf:Fire(true, ui.SettingsFrame)
	ui.SettingsFrame.Visible = true
end))

local npSpeed = ui.SettingsFrame.ThisFrame.DayValue:Clone()
npSpeed.TextBox.LocalScript:Destroy()
npSpeed.Update:Destroy()
npSpeed.Name = "NoclipSpeed"
npSpeed.Position = UDim2.new(0.545, 0, 0.4, 0)
npSpeed.Size = UDim2.new(0.2, 0, 0.075, 0)
npSpeed.TextBox.Text = tostring(_G.ocPLncSpeed)
npSpeed.TextLabel.Text = "Noclip Speed: "
npSpeed.Parent = ui.SettingsFrame.ThisFrame
ev(npSpeed.TextBox.FocusLost:Connect(function()
	local nm = tonumber(npSpeed.TextBox.Text)
	if not nm then nm = 1 end

	nm = math.floor(math.max(math.min(nm, 10), 0)*10)/10
	_G.ocPLncSpeed = nm

	npSpeed.TextBox.Text = tostring(nm)
end))

if isfile("ocplus/settings/palettes.json") then
	local yay = pcall(function()
		local pals = HTTP:JSONDecode(readfile("ocplus/settings/palettes.json"))
		for _, x in pairs(pals) do
			if typeof(x) ~= "string" then continue end
			if #x ~= 18 then continue end
			palettes[#palettes+1] = x
		end
	end)
	if not yay then
		print("uh oh 3!")
	end
end

-- Addons aTWO
-- Enhancements
xpcall(function()
	local izChangingRn = false
	local obbiz = {}
	local checkObbyItem
	checkObbyItem = function(x)
		if x.Name == "TextLabel" and x.Parent.Name ~= "TextLabel" then return checkObbyItem(x.Parent) end

		if not x:FindFirstChild("TextLabel") then return end
		if not x.TextLabel:IsA("SurfaceGui") then return end

		assignA[x.TextLabel] = true

		if not obbiz[x] then
			obbiz[x] = true
			ev(x.TextLabel.Changed:Connect(function()
				if izChangingRn then return end
				task.wait()
				checkObbyItem(x)
			end))
		end
	end
	local checkObby = function(x)
		task.spawn(function()
			if not x:FindFirstChild("Items") then
				for i = 1, 10 do
					if x:FindFirstChild("Items") then break end
					task.wait(0.5)
				end
				if not x:FindFirstChild("Items") then
					task.wait(2)
					checkObby(x)
					return
				end
			end

			for _, y in pairs(x.Items:GetChildren()) do
				for _, z in pairs(y:GetDescendants()) do
					checkObbyItem(z)
				end
			end
		end)
	end

	for _, x in pairs(workspace.Obbies:GetChildren()) do
		checkObby(x)
	end
	for _, x in pairs(workspace.Featured:GetChildren()) do
		checkObby(x)
	end
	ev(workspace.Obbies.ChildAdded:Connect(checkObby))
	ev(workspace.Featured.ChildAdded:Connect(checkObby))

	local switchToTab
	local colp = props.ColorPicker
	local oldCo = colp.Display.BackgroundColor3
	ev(colp:GetPropertyChangedSignal("Visible"):Connect(function()
		switchToTab("colorpicker")

		oldCo = colp.Display.BackgroundColor3
		if colp.Display:FindFirstChild("two") then colp.Display.two.BackgroundColor3 = oldCo end
	end))

	colpStuff.Name = "cstuff"
	colpStuff.Pall.Visible = false
	colpStuff.Parent = colp

	-- FIX uwu x3
	colpStuff.Pall.pick.new.tooltip.Text = "New"

	local plExample = colpStuff.Pall.list.example:Clone()
	plExample.Visible = false
	
	for _, x in pairs(colpStuff.Pall.list:GetChildren()) do
		if x:IsA("Frame") then x:Destroy() end
	end

	switchToTab = function(x)
		for _, y in pairs(colpStuff.Top:GetChildren()) do
			y.BackgroundTransparency = x == y.Name and 1 or 0.8
		end

		local eloment = game.StarterGui.Edit.PropertiesFrame.ColorPicker

		local calar = x == "colorpicker"
		colp.Display.Visible = calar
		colp.ImageLabel2.Visible = calar
		colp.ImageLabel2.Position = calar and UDim2.new(0, -1, 0, 0) or UDim2.new(100, 0, 100, 0)
		colp.ImageLabel.Visible = calar
		colp.ImageLabel.Position = calar and eloment.ImageLabel.Position or UDim2.new(100, 0, 100, 0)
		colp.PickerTool.Visible = calar
		colp.RedBox.Visible = calar
		colp.GreenBox.Visible = calar
		colp.HueBox.Visible = calar
		if colp:FindFirstChild("HexBox") then colp.HexBox.Visible = calar end
		colp.SaturationBox.Visible = calar
		colp.ValueBox.Visible = calar
		colp.SetButton.Visible = calar
		colp.CancelButton.Visible = calar

		colpStuff.Pall.Visible = x == "colorpalettes"
	end
	
	for _, y in pairs(colpStuff.Top:GetChildren()) do
		ev(y.Activated:Connect(function()
			switchToTab(y.Name)
		end))
	end

	local loadingIn = false
	local lastCat
	local function switchToCat(x, Stop)
		lastCat = x
		for _, y in pairs(colpStuff.Pall.pick:GetChildren()) do
			if y:IsA("TextButton") then
				y.BackgroundTransparency = x == y.Name and 0.9 or 1
			end
		end

		local function buildThing(step, mode, tagsOrTimeframe)
			local Step = tostring(step)
			local Sort = mode == "search" and "" or mode
			local Tags = mode == "search" and table.concat(tagsOrTimeframe, "-") or ""
			local Timeframe = mode == "search" and "4000" or tonumber(tagsOrTimeframe)
		
			return ("step=%s&sort=%s&tags=%s&timeframe=%s"):format(Step, Sort, Tags, Timeframe)
		end

		local Body = x == "collection" and "local" or nil
		if x == "new" then Body = buildThing(Stop, "new", "30")
		elseif x == "popular" then Body = buildThing(Stop, "popular", "365")
		elseif x == "random" then Body = buildThing(Stop, "random", "4000") end
		
		if Stop == 0 then
			for _, x in pairs(colpStuff.Pall.list:GetChildren()) do
				if x:IsA("Frame") then x:Destroy() end
			end
		end
		
		colpStuff.Pall.list.ScrollingEnabled = false
		colpStuff.Pall:SetAttribute("isFetching", true)
		local obj
		if Body == "local" then
			local rawr = {}
			for i, x in pairs(palettes) do
				local j = i-1
				local ja = Stop*40
				if j >= ja then rawr[#rawr+1] = {
					code = x,
					likes = "-",
					date = "-",
					has = true
				} end
			end
			obj = rawr
		else
			obj = HttpGet("https://colorhunt.co/php/feed.php", "fetching color palettes", {
				Method = "POST",
				Headers = {
					["Content-Type"] = "application/x-www-form-urlencoded; charset=UTF-8"
				},
				Body = Body -- no tags lol
			})
			if not obj then return end
			obj = HTTP:JSONDecode(obj)
		end
		
		colpStuff.Pall.list.ScrollingEnabled = true
		colpStuff.Pall:SetAttribute("isFetching", false)
		colpStuff.Pall:SetAttribute("length", #obj)
		colpStuff.Pall:SetAttribute("step", Stop)
		for _, xa in pairs(obj) do
			local L = plExample:Clone()
			local cds = {}
			for i = 1, 4 do
				local min = (i-1)*6
				if min == 0 then min = 1
				else min = min+1 end

				cds[#cds+1] = xa.code:sub(min, i*6)
			end
			local zaza = {L.display.first, L.display.second, L.display.third, L.display.fourth}
			local has = xa.has or table.find(palettes, xa.code)

			L.Name = xa.code
			local function onchange()
				L.bottom.like.heart.fill.Visible = has
				L.bottom.like.count.Text = tonumber(xa.likes) and tostring(tonumber(xa.likes)+(has and 1 or 0)) or xa.likes
			end
			L.bottom.count.Text = xa.date

			for i, el in pairs(zaza) do
				local cd = cds[i]
				local car = Color3.fromHex(cd)

				el.BackgroundColor3 = car
				if el:FindFirstChild("cover") then el.cover.BackgroundColor3 = car end

				local theDisplay = "#"..cd:upper()
				ev(el.detect.Activated:Connect(function()
					colp.Update:Fire(car)
					switchToTab("colorpicker")
				end))
				ev(el.detect.MouseEnter:Connect(function()
					L.display.overlay.Text = theDisplay
					L.display.overlay.Visible = true
				end))
				ev(el.detect.MouseLeave:Connect(function()
					if L.display.overlay.Text ~= theDisplay then return end
					L.display.overlay.Visible = false
				end))
			end

			ev(L.bottom.like.heart.Activated:Connect(function()
				has = not has

				if has and not table.find(palettes, xa.code) then table.insert(palettes, xa.code)
				elseif not has and table.find(palettes, xa.code) then table.remove(palettes, table.find(palettes, xa.code)) end

				onchange()
			end))
			onchange()

			L.Visible = true
			L.LayoutOrder = #colpStuff.Pall.list:GetChildren()
			L.Parent = colpStuff.Pall.list
		end
	end
	
	for _, x in pairs(colpStuff.Pall.pick:GetChildren()) do
		if x:IsA("TextButton") then
			ev(x.MouseEnter:Connect(function()
				x.tooltip.Visible = true
			end))
			ev(x.MouseLeave:Connect(function()
				x.tooltip.Visible = false
			end))
			ev(x.Activated:Connect(function()
				switchToCat(x.Name, 0)
			end))
		end
	end

	ev(colpStuff.Pall.list:GetPropertyChangedSignal("CanvasPosition"):Connect(function()
		local pos = colpStuff.Pall.list.CanvasPosition.Y
		local soz = colpStuff.Pall.list.AbsoluteCanvasSize.Y
		local ySoz = colpStuff.Pall.list.AbsoluteSize.Y

		local Alength = colpStuff.Pall:GetAttribute("length")
		local Astep = colpStuff.Pall:GetAttribute("step")
		local Afetching = colpStuff.Pall:GetAttribute("isFetching")
		
		if lastCat and colpStuff.Pall.Visible and pos >= soz-ySoz and Alength >= 40 and not Afetching then
			switchToCat(lastCat, Astep+1)
		end
	end))

	local ch
	doColorPicker = function(a)
		if not a then switchToTab("colorpicker") end

		colpStuff.Top.Visible = a

		if colp:FindFirstChild("offset") then colp.offset:Destroy() end
		if colp:FindFirstChild("HexBox") then colp.HexBox:Destroy() end
		if colp.Display:FindFirstChild("two") then colp.Display.two:Destroy() end
		local two = colp.Display:Clone()
		two.Name = "two"
		two.BorderSizePixel = 0
		two.Size = UDim2.new(0.5, 0, 1, 0)
		two.AnchorPoint = Vector2.new(1, 0)
		two.Position = UDim2.new(1, 0, 0, 0)
		two.BackgroundColor3 = colp.Display.BackgroundColor3
		if a then two.Parent = colp.Display end

		local nf = colp:Clone()
		nf:ClearAllChildren()
		nf.Size = UDim2.new(1, 0, 0.125, 0)
		nf.Name = "offset"
		nf.AnchorPoint = Vector2.new()
		nf.Position = UDim2.new(0, 0, 1, 0)
		nf.ZIndex = 1
		nf.Visible = true
		-- cover the grid line yippee
		local lin = nf:Clone()
		lin.BorderSizePixel = 0
		lin.Size = UDim2.new(1, -2, 0.5, 0)
		lin.Position = UDim2.new(0, 1, 0, 0)
		lin.AnchorPoint = Vector2.new(0, 0.5)
		lin.Parent = nf
		if a then nf.Parent = colp end

		colp.AnchorPoint = Vector2.new(1, 0)
		colp.ImageLabel2.AnchorPoint = Vector2.new(1, 0)
		colp.ImageLabel2.Position = UDim2.new(0, -1, 0, 0)
		colp.ImageLabel2.Size = UDim2.new(0.075, 0, a and 1.125 or 1, 0)

		local o = a and 0.125 or 0
		colp.Display.AnchorPoint = Vector2.new(0.5, 0)
		colp.Display.Position = UDim2.new(0.2, 0, 0.85+o, 0)
		colp.SetButton.Position = UDim2.new(0.4, 0, 0.85+o, 0)
		colp.CancelButton.Position = UDim2.new(0.699, 0, 0.85+o, 0)
		colp.Display.ZIndex,
			colp.SetButton.ZIndex,
			colp.SetButton.TextLabel.ZIndex,
			colp.CancelButton.ZIndex,
			colp.CancelButton.TextLabel.ZIndex = 2, 2, 2, 2, 2, 2

		local hexBox = colp.HueBox:Clone()
		hexBox.Name = "HexBox"
		hexBox.AnchorPoint = Vector2.new()
		hexBox.Position = UDim2.new(0.245, 0, 0.725+o, 0)
		hexBox.TextLabel.Text = "HEX:"
		hexBox.Size = UDim2.new(0.63, 0, 0.079, 0)
		hexBox.Text = colp.Display.BackgroundColor3:ToHex()
		if a then hexBox.Parent = colp end

		ev(hexBox.FocusLost:Connect(function()
			local Hcc, cc = pcall(function()
				return Color3.fromHex(hexBox.Text)
			end)
			if not Hcc then
				Hcc, cc = pcall(function ()
					return Color3.fromHex(hexBox.Text:sub(2))
				end)
			end

			if Hcc and cc then
				local tt = cc:ToHex()
				if table.find({
					"b00b69",
					"69b00b",
					"420420",
					"696969",
					"694200",
					"420696",
					"420069"
				}, tt) then
					task.spawn(function()
						playAudio(customast("ocplus/sounds/violinScreech.mp3"))
						task.wait(0.6)
						playAudio(customast("ocplus/sounds/vineBoom.mp3"))				
						task.wait(0.2)
						jumpscare(customast("ocplus/images/shocked.png"), 3)
					end)
				end

				colp.Update:Fire(cc)
			end
			hexBox.Text = colp.Display.BackgroundColor3:ToHex()
		end))

		if ch then ch:Disconnect() end
		local yuh = colp.Display:GetPropertyChangedSignal("BackgroundColor3"):Connect(function()
			hexBox.Text = colp.Display.BackgroundColor3:ToHex()
		end)
		ev(yuh)
		ch = yuh
	end
	colpStuff.Top.Visible = false
	switchToTab("colorpicker")
	switchToCat("new", 0)

	local hazzah = {}
	local doIcon
	doIcon = function(z, a)
		if (z:IsA("ImageLabel") or z:IsA("ImageButton")) and not z:IsDescendantOf(props) then
			--iconMap
			local to
			local has = false
			for x, y in pairs(iconMap) do
				local from = a and x or y

				if z.Image == x or z.Image == y then has = true end
				if z.Image == from then to = a and y or x end
			end

			if to then
				if not _G.ocPLiconz[z] then
					_G.ocPLiconz[z] = z.Image
				end
				z.Image = to
				if z.Parent.Parent == ui.SelectionFrame then
					if a then
						z.Size = UDim2.new(0.85, -10, 0.85, -10)
					else
						z.Size = UDim2.new(0.9, -10, 0.9, -10)
					end
				end
			end
			if has then
				local imgc = adds.darkmode.enabled and Color3.new(1, 1, 1) or Color3.new()
				local imgcOtherOne = adds.darkmode.enabled and Color3.new() or Color3.new(1, 1, 1)

				if not a and z.Parent == ui.SelectionFrame.CloneButton then
					z.ImageColor3 = imgcOtherOne
				else
					z.ImageColor3 = imgc
				end
			end

			if hazzah[z] then hazzah[z]:Disconnect() end
			local ewv = z.Changed:Connect(function()
				doIcon(z, adds.enhance.enabled)
			end)
			ev(ewv)
			hazzah[z] = ewv
		end
	end
	doIcons = function(a)
		for _, x in pairs(pui:GetChildren()) do
			if not x:IsA("ScreenGui") then continue end

			for _, y in pairs(x:GetDescendants()) do
				doIcon(y, a)
			end
		end
	end
	ev(pui.DescendantAdded:Connect(function(z)
		doIcon(z, adds.enhance.enabled)
	end))

	local function setGridStyle(grs)
		ldo.LoadFrame.ViewList.ImageTransparency = grs == "list" and 0 or 0.5
		ldo.LoadFrame.ViewGrid.ImageTransparency = grs == "grid" and 0 or 0.5

		local mreset = {
			{{"Title"}, UDim2.new(0, 10, 0.05, 0), UDim2.new(0.550, 0, 0.699, 0)},
			{{"ID"}, UDim2.new(0, 10, 0.899, 0), UDim2.new(0.550, 0, 0.18, 0)},
			{{"RenameBox"}, UDim2.new(0, 10, 0.05, 0), UDim2.new(0.55, 0, 0.699, 0)},
			{{"RenameButton"}, UDim2.new(0.8249, -8, 0.5, 0), UDim2.new(0.0599, 0, 0.3499, 0), Vector2.new(1, 0.5)},
			{{"PlayButton"}, UDim2.new(1, -8, 0.5, 0), UDim2.new(0.15, -8, 0.6, -4), Vector2.new(1, 0.5)},
			{{"AmountLabel"}, UDim2.new(0.899, 0, 0.875, 0), UDim2.new(0.2, 0, 0.2, 0), Vector2.new(0.5, 0.5)},
			{{"NameLabel"}, UDim2.new(0, 10, 0.0750, 0), UDim2.new(0.6, -5, 0.55, 0)},
			{{"OwnerLabel"}, UDim2.new(0, 10, 0.5749, 2), UDim2.new(0.5, -5, 0.275, -2)},
			{{"LikesLabel"}, UDim2.new(0.7749, 0, 0.4, 0), UDim2.new(0.1, 0, 0.375, 0), Vector2.new(0.5, 0.5)},
			{{"LikesExtraLabel"}, UDim2.new(0.7749, 0, 0.6999, 0), UDim2.new(0.1, 0, 0.25, 0), Vector2.new(0.5, 0.5)},
			{{"Owner"}, UDim2.new(0, 10, 0.6999, 0), UDim2.new(0.4, 0, 0.3, 0)},
			{{"UnlikeButton"}, UDim2.new(0.8249, -8, 0.5, 0), UDim2.new(0.1, -4, 0.6, -4), Vector2.new(1, 0.5)}
		}
		local function goTSF(sf, reset, over)
			local maxSize = 0
			local listSize = sf.AbsoluteSize.Y*0.16029
			over = over or {}
			local yuh = {}
			for _, x in pairs(over) do
				for _, y in pairs(x[1]) do
					yuh[y] = x
				end
			end

			for _, x in pairs(sf:GetChildren()) do
				if x.Name == "zAddObby" then continue end
				if x:IsA("Frame") then
					local parseN = tonumber(x.Name:sub(6)) or 0
					local order = parseN-(sf:FindFirstChild("Frame0") and 0 or 1)

					local grad = {
						{{"Title", "NameLabel"}, UDim2.new(0, 5, 0, 5), UDim2.new(1, -10, 0.3, 0)},
						{{"ID", "OwnerLabel"}, UDim2.new(0, 5, 0.33, 5), UDim2.new(0.75, -10, 0.15, 0)},
						{{"RenameBox"}, UDim2.new(0, 5, 0, 5), UDim2.new(1, -10, 0.3, 0)},
						{{"RenameButton"}, UDim2.new(0, 5, 0.82, -10), UDim2.new(0.15, 0, 0.15, 0), Vector2.new(0, 1)},
						{{"PlayButton"}, UDim2.new(0, 5, 1, -5), UDim2.new(1, -10, 0.18, 0), Vector2.new(0, 1)},
						{{"AmountLabel"}, UDim2.new(1, -5, 0.82, -10), UDim2.new(0.5, 0, 0.15, 0), Vector2.new(1, 1)},
						{{"LikesLabel"}, UDim2.new(1, -5, 0.33, 5), UDim2.new(0.25, 0, 0.15, 0), Vector2.new(1, 0)},
						{{"LikesExtraLabel"}, UDim2.new(1, -5, 0.48, 5), UDim2.new(0.25, 0, 0.1, 0), Vector2.new(1, 0)},
						{{"UnlikeButton"}, UDim2.new(1, -5, 0.82, -10), UDim2.new(0.2, 0, 0.21, 0), Vector2.new(1, 1)}
					}

					local tosex
					local canover = false
					local as = grs == "list" and listSize*1 or listSize*2.5
					if grs == "list" then
						local Y = order*as
						x.Position = UDim2.new(0, 0, 0, Y)
						x.Size = UDim2.new(1, -10, 0, as)
						tosex = reset
					else
						local X, Y = (order%2)/2, math.floor(order/2)*as
						x.Position = UDim2.new(X, 0, 0, Y)
						x.Size = UDim2.new(0.5, 0, 0, as)
						tosex = grad
						canover = true
					end

					local tsex = {}
					for _, x in pairs(tosex) do
						for _, y in pairs(x[1]) do
							tsex[y] = x
						end
					end
					if canover then
						for y, x in pairs(yuh) do
							tsex[y] = x
						end
					end
					
					for A, B in pairs(tsex) do
						local C = x:FindFirstChild(A)
						if not C then continue end

						if B[2] then C.Position = B[2] end
						if B[3] then C.Size = B[3] end
						if B[4] then C.AnchorPoint = B[4] end
					end

					local za = x.Position.Y.Offset+x.Size.Y.Offset
					if za > maxSize then maxSize = za end
				end
			end

			if sf:FindFirstChild("zAddObby") then
				sf.zAddObby.Position = UDim2.new(0, 0, 0, maxSize)
				maxSize = maxSize+sf.zAddObby.Size.Y.Offset
			end

			sf.CanvasSize = UDim2.new(0, 0, 0, maxSize)
		end

		goTSF(ldo.LoadFrame.Home.InnerFrame.ScrollingFrame, mreset)
		goTSF(ldo.LoadFrame.Discover.InnerFrame.ScrollingFrame, mreset)
		mreset[2][2] = UDim2.new(0, 10, 0, 0)
		mreset[2][3] = UDim2.new(0.4, 0, 0.6999, 0)
		goTSF(ldo.LoadFrame.Likes.InnerFrame.ScrollingFrame, mreset, {
			{{"ID"}, UDim2.new(0, 5, 0, 5), UDim2.new(1, -10, 0.3, 0)},
			{{"Owner"}, UDim2.new(0, 5, 0.33, 5), UDim2.new(0.75, -10, 0.15, 0)},
		}) -- ID, Owner
		mreset[2][2] = UDim2.new(0, 10, 0.6999, 0)
		mreset[2][3] = UDim2.new(0.6, 0, 0.3, 0)
		mreset[7][2] = UDim2.new(0, 10, 0, 0)
		mreset[7][3] = UDim2.new(0.6, 0, 0.6999, 0)
		goTSF(ldo.LoadFrame.Recents.InnerFrame.ScrollingFrame, mreset)
	end

	doLoaded = function(y)
		if not y then setGridStyle("list")
		else setGridStyle(adds.enhance.gridstyle) end

		local AB = y and 0.03 or 0
		ldo.LoadFrame.Home.InnerFrame.Size = UDim2.new(0.8999, 0, 0.7099-AB, 0)
		ldo.LoadFrame.Discover.InnerFrame.Size = UDim2.new(0.8999, 0, 0.6499-AB, 0)
		ldo.LoadFrame.Likes.InnerFrame.Size = UDim2.new(0.899, 0, 0.6100-AB, 0)
		ldo.LoadFrame.Recents.InnerFrame.Size = UDim2.new(0.899, 0, 0.7099-AB, 0)

		ldo.LoadFrame.ViewList.Visible = y
		ldo.LoadFrame.ViewGrid.Visible = y
	end

	local jic = Instance.new("ImageButton")
	jic.AutoButtonColor = false
	jic.BackgroundTransparency = 1
	jic.ImageColor3 = Color3.new(0, 0, 0)
	jic.Size = UDim2.new(0.05, 0, 0.05, 0)
	jic.SizeConstraint = Enum.SizeConstraint.RelativeYY
	jic.Visible = false
	local listIC = jic:Clone()
	listIC.Name = "ViewList"
	listIC.Position = UDim2.new(0.5, -8, 0.985, 0)
	listIC.AnchorPoint = Vector2.new(1, 1)
	listIC.Image = "rbxassetid://11837378812"
	listIC.Parent = ldo.LoadFrame
	local gridIC = jic:Clone()
	gridIC.Name = "ViewGrid"
	gridIC.Position = UDim2.new(0.5, 8, 0.985, 0)
	gridIC.AnchorPoint = Vector2.new(0, 1)
	gridIC.Image = "rbxassetid://11837377161"
	gridIC.Parent = ldo.LoadFrame

	local isFirst = true
	ev(ldo.LoadFrame.DescendantAdded:Connect(function()
		if isFirst then
			isFirst = false
			task.wait()
			setGridStyle(adds.enhance.gridstyle)
			task.wait()
			isFirst = true
		end
	end))

	ev(listIC.Activated:Connect(function()
		if adds.enhance.gridstyle == "list" then return end
		adds.enhance.gridstyle = "list"
		setGridStyle("list")
	end))
	ev(gridIC.Activated:Connect(function()
		if adds.enhance.gridstyle == "grid" then return end
		adds.enhance.gridstyle = "grid"
		setGridStyle("grid")
	end))

	plusIcon = Instance.new("TextButton")
	plusIcon.Name = "Plus"
	plusIcon.AnchorPoint = Vector2.new(1, 0.5)
	plusIcon.Position = UDim2.new(0.6, 0, 0.5, 0)
	plusIcon.BackgroundColor3 = Color3.new(1, 0, 0)
	plusIcon.BackgroundTransparency = 0.5
	plusIcon.SizeConstraint = Enum.SizeConstraint.RelativeYY
	plusIcon.Size = UDim2.new(0.75, 0, 0.75, 0)
	plusIcon.TextScaled = true
	plusIcon.Text = "+"
	plusIcon.TextColor3 = Color3.new(1, 1, 1)
	plusIcon.Visible = true
	plusIcon.ZIndex = 4
	plusIcon.Parent = propsTxt
	propsTxt.Divide.ZIndex = 5

	local plusAll = Instance.new("TextBox")
	plusAll.Name = "PlusBig"
	plusAll.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	plusAll.BorderColor3 = Color3.new()
	plusAll.BackgroundTransparency = 0
	plusAll.BorderSizePixel = 1
	plusAll.AnchorPoint = Vector2.new(0.5, 0.5)
	plusAll.Position = UDim2.new(0.5, 0, 0.5, 0)
	plusAll.Size = UDim2.new(0.55, 0, 0.6, 0)
	plusAll.TextScaled = true
	plusAll.TextColor3 = Color3.new(1, 1, 1)
	plusAll.Font = Enum.Font.Code
	plusAll.TextXAlignment = Enum.TextXAlignment.Left
	plusAll.TextYAlignment = Enum.TextYAlignment.Top
	plusAll.MultiLine = true
	plusAll.ClearTextOnFocus = false
	plusAll.Visible = false
	plusAll.ZIndex = 2
	plusAll.Parent = ui
	plusAll.Text = propsTxt.TextBox.Text
	local close = props.Close:Clone()
	close.Parent = plusAll
	close.BackgroundColor3 = Color3.fromRGB(39, 39, 39)
	close.BackgroundTransparency = 1
	close.AnchorPoint = Vector2.new()
	close.Position = UDim2.new(1, 0, 0, 10)
	close.Size = UDim2.new(0.06, 0, 0.06, 0)
	close.Parent = plusAll
	close.ZIndex = 3
	ev(close.Activated:Connect(function()
		plusAll.Visible = not plusAll.Visible
	end))
	ev(plusIcon.Activated:Connect(function()
		plusAll.Visible = not plusAll.Visible
	end))

	local donot = false
	ev(plusAll:GetPropertyChangedSignal("Text"):Connect(function()
		if donot then return end
		donot = true
		propsTxt.TextBox.Text = plusAll.Text
		donot = false
	end))
	ev(propsTxt.TextBox:GetPropertyChangedSignal("Text"):Connect(function()
		if donot then return end
		donot = true
		plusAll.Text = propsTxt.TextBox.Text
		donot = false
	end))

	local oncopies = {}
	setCopies = function(vl)
		for _, x in pairs(oncopies) do
			x.Visible = vl
		end
	end
	local exampCopy = Instance.new("TextButton")
	exampCopy.Name = "CopyButton"
	exampCopy.AnchorPoint = Vector2.new(1, 0.5)
	exampCopy.BackgroundColor3 = accent
	exampCopy.BorderColor3 = Color3.new()
	exampCopy.Position = UDim2.new(1, -5, 0.5, 0)
	exampCopy.Size = UDim2.new(0.19, 0, 0.9, -5)
	exampCopy.ZIndex = 4
	exampCopy.Font = Enum.Font.SourceSans
	exampCopy.Text = "Copy"
	exampCopy.TextColor3 = Color3.new()
	exampCopy.TextScaled = true
	exampCopy.TextSize = 14
	exampCopy.TextWrapped = true
	exampCopy.Visible = false
	
	local isd = false
	local function awaitMouseClick()
		isd = true
		local zpart
		local eva = mouse.Button1Up:Connect(function()
			if mouse.Target then
				zpart = mouse.Target
			end
		end)
		ev(eva)
		
		repeat task.wait() until isd == "nah" or zpart

		isd = false
		eva:Disconnect()

		return zpart
	end
	
	local effects = require(game.ReplicatedStorage.EffectModule)
	local zgui = effects.GetGuiObjects()
	local propToInst = effects.EffectToInstance()
	local instToProp = effects.InstanceToEffect()
	local effProps = effects.EffectProperties()

	local function copyEffect(dapr, xd, sold)
		local izgu = zgui[xd.Name]

		for _, b in pairs(effProps[dapr]) do
			local nam, typ = b[1], b[2]

			local ch, ch2 = pcall(gethiddenproperty, xd, nam)
			if not ch and izgu and xd:FindFirstChild(xd.Name) then
				ch, ch2 = pcall(gethiddenproperty, xd[xd.Name], nam)
			end

			if not ch or not ch2 then continue end
			
			if typeof(ch2) == "EnumItem" then ch2 = ch2.Name
			elseif typeof(ch2) == "UDim2" then ch2 = {ch2.X.Scale, ch2.Y.Scale} end

			game.ReplicatedStorage.Events.EffectObject:InvokeServer(sold, dapr, nam, ch2)
		end
	end

	local sell = ui.SelectionFrame.DescLabel
	if sell.TextColor3.G == 1 then sell.TextColor3 = Color3.new(1, 1, 1) end

	for _, b in pairs(props.ScrollingFrame:GetChildren()) do
		if b.Name == "bBehaviour" or b.Name == "cEffects" then
			local coap = exampCopy:Clone()
			coap.Parent = b
			oncopies[#oncopies+1] = coap

			if b.Name == "bBehaviour" then
				ev(coap.Activated:Connect(function()
					if isd then isd = "nah"; return end

					if sell.TextColor3 ~= Color3.new(1, 1, 1) then return end
					local toxic = sell.Text
					sell.Text = "Select a part to copy it's behaviour."
					sell.TextColor3 = Color3.new(0, 0, 1)

					local selected = getSelected()
					freezeKBs()
					local zport = awaitMouseClick()
					unfreezeKBs()

					sell.Text = toxic
					sell.TextColor3 = Color3.new(1, 1, 1)

					if zport then
						for _, xd in pairs(zport:GetChildren()) do
							if xd:IsA("ValueBase") then
								game.ReplicatedStorage.Events.BehaviourObject:FireServer(selected, xd.Name, xd.Value)
							end
						end
					end
				end))
			else
				ev(coap.Activated:Connect(function()
					if isd then isd = "nah"; return end

					if sell.TextColor3 ~= Color3.new(1, 1, 1) then return end
					local toxic = sell.Text
					sell.Text = "Select a part to copy it's effects."
					sell.TextColor3 = Color3.new(0, 0, 1)

					local selected = getSelected()
					freezeKBs()
					local zport = awaitMouseClick()
					unfreezeKBs()

					sell.Text = toxic
					sell.TextColor3 = Color3.new(1, 1, 1)

					if zport then
						for _, xd in pairs(zport:GetChildren()) do
							local dapr = instToProp[xd.Name]
							if not dapr then continue end

							local sold = {}
							for _, sol in pairs(selected) do
								if sol:FindFirstChild(xd.Name) then sold[#sold+1] = sol end
							end
							if not sold[1] then continue end

							copyEffect(dapr, xd, sold)
						end
					end
				end))
			end
		end
	end

	for _, b in pairs(props.ScrollingFrame.cEffects1.ScrollingFrame:GetChildren()) do
		if b.Name:sub(-1) ~= "1" and b:IsA("Frame") then
			if not propToInst[b.Name] then continue end
			local coap = exampCopy:Clone()
			coap.Position = UDim2.new(0.91, -5, 0.5, 0)
			coap.Size = UDim2.new(0.19, 0, 0.8, -5)
			coap.Parent = b
			oncopies[#oncopies+1] = coap

			ev(coap.Activated:Connect(function()
				if isd then isd = "nah"; return end

				if sell.TextColor3 ~= Color3.new(1, 1, 1) then return end
				local toxic = sell.Text
				sell.Text = ("Select a part to copy it's %s effect."):format(b.Name)
				sell.TextColor3 = Color3.new(0, 0, 1)

				local selected = getSelected()
				freezeKBs()
				local zport = awaitMouseClick()
				unfreezeKBs()

				sell.Text = toxic
				sell.TextColor3 = Color3.new(1, 1, 1)

				if zport then
					local xd = zport:FindFirstChild(propToInst[b.Name])
					if not xd then return end
					local dapr = b.Name

					local sold = {}
					for _, sol in pairs(selected) do
						if sol:FindFirstChild(xd.Name) then sold[#sold+1] = sol end
					end
					if not sold[1] then return end

					copyEffect(dapr, xd, sold)
				end
			end))
		end
	end

	local eot = ui.PartCount:Clone()
	eot:ClearAllChildren()
	eot.Name = "Timer"
	eot.Text = ""
	eot.AnchorPoint = Vector2.new(0, 0.1)
	eot.Position = UDim2.new(0, 0, 1, 0)
	eot.Size = UDim2.new(1, 0, 0.8, 0)
	eot.Parent = ui.PartCount
	eot.Visible = false
	timerAe = eot

	local bot = ldo.CurrentObby:Clone()
	bot.Name = "Timer"
	bot.Text = ""
	bot.AnchorPoint = Vector2.new(0, 0.1)
	bot.Position = UDim2.new(0, 0, 1, 0)
	bot.Size = UDim2.new(1, 0, 0.8, 0)
	bot.Parent = ldo.CurrentObby
	bot.Visible = false
	timerBe = bot
	
	setObbyTimer = function(a)
		eot.Visible = a
		bot.Visible = a
	end
	
	local function checkShit()
		if pui.IsEditing.Value then
			timerAs = tick()
		else
			timerAs = false
		end
	end
	ev(pui.IsEditing:GetPropertyChangedSignal("Value"):Connect(checkShit))
	checkShit()

	local function checkShit2()
		if pui.CurrentObby.Value then
			timerBs = tick()
		else
			timerBs = false
		end
	end
	ev(pui.CurrentObby:GetPropertyChangedSignal("Value"):Connect(checkShit2))
	checkShit2()
end, warn)
-- DRpc
xpcall(function()
	local activity = nil

	setActivity = function(details, state)
		if not _G.ocPLrpcW then return end
		if state or details then
			activity = {
				largeImageKey = "gamethumbnail",
				largeImageText = "Obby Creator",
				smallImageKey = "groupthumbnail",
				smallImageText = "Whirlpool Studio",
				details = details,
				state = state,
				startTimestamp = DateTime.now().UnixTimestampMillis
			}
		end
	
		task.spawn(function()
			if adds.drpc.enabled then
				_G.ocPLrpcW:Send(HTTP:JSONEncode({
					e = "set",
					d = activity
				}))
			else
				_G.ocPLrpcW:Send(HTTP:JSONEncode({
					e = "set",
					d = nil
				}))
			end
		end)
	end
	
	local function displayObby(x)
		return x.ObbyNameVAL.Value .. " (" .. x.IdVAL.Value .. ")"
	end
	
	local oD, oS = nil, nil
	local function updateActivity()
		local d, s
		local obby = pui.CurrentObby.Value
		if obby then
			if obby.Name == plr.Name and pui.IsEditing.Value then
				d, s = "Editing", displayObby(obby)
			else
				d, s = "Playing", displayObby(obby)
			end
		else
			d = "Idling"
		end
	
		if oD ~= d or oS ~= s then
			oD, oS = d, s
			setActivity(d, s)
		end
	end
	
	ev(RS.Heartbeat:Connect(function()
		if not _G.ocPLrpcW then return end
	
		updateActivity()
	end))
	
	local gdhdfgh = tick()
	_G.ocPLrpcRN = gdhdfgh
	rpcA = function(shouldLog)
		_G.ocPLrpcW = nil
		local a, b = pcall(function()
			return WebSocket.connect("ws://localhost:55879")
		end)
		if not a then
			_G.ocPLrpcW = false
			if shouldLog then out:Fire("Failed to reconnect OC+ RPC.", Color3.new(1, 0.2, 0.2), 5) end
			return
		end
	
		_G.ocPLrpcW = b
		b.OnClose:Connect(function()
			task.wait(0.5)
			if _G.ocPLrpcRN ~= gdhdfgh then return end
			_G.ocPLrpcW = nil
			out:Fire("OC+ RPC disconnected. Reconnecting...", Color3.new(0.8, 0.8, 0.8), 5)
			task.wait(2)
			if _G.ocPLrpcRN ~= gdhdfgh then return end
			rpcA(true)
		end)
		b.OnMessage:Connect(function(enc)
			local scs, d = pcall(HTTP.JSONDecode, HTTP, enc)
			if not scs then return end
	
			if d.e == "ping" then
				b:Send(HTTP:JSONEncode({ e = "pong" }))
			elseif d.e == "liveping" then
				out:Fire("Ping pong!", Color3.new(1, 1, 1), 5)
			end
		end)
	
		out:Fire("Connected to OC+ RPC!", Color3.new(0.2, 1, 0.2), 5)
	end
	task.spawn(rpcA)
end, warn)
-- Darkmode
xpcall(function()
	local function dmbackup(instance, p, v)
		_G.ocPLbackup[instance] = _G.ocPLbackup[instance] or {}
		if not _G.ocPLbackup[instance][p] then
			_G.ocPLbackup[instance][p] = v
		end
	end
	local function getbackup(instance, p)
		return _G.ocPLbackup[instance] and _G.ocPLbackup[instance][p] or instance[p]
	end
	local function bake(s, v)
		local md = adds.darkmode.mode
		return (md == "Saturated" and s or 0), (v+(s/7))
	end
	
	local isChanging = false
	local updateDarkMode
	local elmevs = {}
	updateDarkMode = function(j, originate, rs)
		if j == ui.SettingsFrame.ThisFrame.MusicFrame.Back then return end
		if j:IsDescendantOf(props) then return end
		
		elmevs[j] = elmevs[j] or {}
		for _, x in pairs(elmevs[j]) do
			x:Disconnect()
		end
	
		if _G.ocPLbackup[j] and rs then
			_G.ocPLbackup[j][rs] = nil
		end
	
		local hasBgc = classIdentifiers.BackgroundColor3[j.ClassName]
		local hasTxc = classIdentifiers.TextColor3[j.ClassName]
		local hasImc = classIdentifiers.ImageColor3[j.ClassName]
		if not hasBgc then return end

		local bgc, imc, txc
		if hasBgc then bgc = j.BackgroundColor3 end
		if hasTxc then txc = j.TextColor3 end
		if hasImc then imc = j.ImageColor3 end
		
		if not originate and _G.ocPLbackup[j] then
			bgc = _G.ocPLbackup[j].BackgroundColor3 or bgc
			imc = _G.ocPLbackup[j].ImageColor3 or imc
			txc = _G.ocPLbackup[j].TextColor3 or txc
		end
		
		if hasBgc then dmbackup(j, "BackgroundColor3", bgc or j.BackgroundColor3) end
		if hasImc then dmbackup(j, "ImageColor3", imc or j.ImageColor3) end
		if hasTxc then dmbackup(j, "TextColor3", txc or j.TextColor3) end
	
		local H,h,hh,S,s,ss,V,v,vv
		H, S, V = bgc:ToHSV()
		if V >= 0.5 then
			V = 0+(V/11)
		end
		S, V = bake(S, V)
		if hasImc then
			h, s, v = imc:ToHSV()
			if j.Name == "Back" or j.Parent.Name == "Back" then
				if v >= 0.5 then
					v = 0+(v/11)
				end
			else
				if v < 0.5 then
					v = 1-v
				end
			end
			s, v = bake(s, v)
		end
		if hasTxc then
			hh, ss, vv = txc:ToHSV()
			if ss < 0.5 then
				if vv < 0.5 then
					vv = 1-vv
				end
				ss = 0
			end
	
			ss, vv = bake(ss, vv)
		end
	
		dmed[j] = {}
		if hasBgc then dmed[j].BackgroundColor3 = Color3.fromHSV(H, S, V) end
		if hasImc then dmed[j].ImageColor3 = Color3.fromHSV(h, s, v) end
		if hasTxc then dmed[j].TextColor3 = Color3.fromHSV(hh, ss, vv) end
	
		local selfIsChanging = false
		if adds.darkmode.enabled then
			selfIsChanging = true
			for p, v in pairs(dmed[j]) do
				pcall(function()
					if j[p] ~= v then return end
					j[p] = v
				end)
			end
			selfIsChanging = false
		end
	
		local h = {"BackgroundColor3", "ImageColor3", "TextColor3"}
		local yay = {}
		for _, H in pairs(h) do
			pcall(function()
				if not dmed[H] then return end
				local evv = j:GetPropertyChangedSignal(H):Connect(function()
					if isChanging or selfIsChanging then return end
					updateDarkMode(j, true, H)
				end)
				ev(evv)
				table.insert(elmevs[j], evv)
			end)
		end
	
		local ew = j:GetPropertyChangedSignal("Parent"):Connect(function()
			if j.Parent then return end
			_G.ocPLbackup[j] = nil
		end)
		ev(ew)
		table.insert(elmevs[j], evv)
	end
	
	redoThingiesOmg = function()
		for _, h in pairs(pui:GetChildren()) do
			if not h:IsA("ScreenGui") then continue end
			local e = h.DescendantAdded:Connect(updateDarkMode)
			ev(e)
			for _, x in pairs(h:GetDescendants()) do
				updateDarkMode(x)
			end
		end
	end
	redoThingiesOmg()
end, warn)
allDone = true

-- Functionality
task.wait()

-- hey lois im an easter egg
local keybindsTD = {
	Enum.KeyCode.P,
	Enum.KeyCode.E,
	Enum.KeyCode.T,
	Enum.KeyCode.E,
	Enum.KeyCode.R
}
local keybindsI = 1
local function awaitNewLink(e, amount)
	local objects = {}
	amount = amount or 99999999
	
	local unti, uniT = 0, 0.15
	local evw = e.StreamingFixLinks.ChildAdded:Connect(function(obj)
		if obj:IsA("ObjectValue") then
			local vl = obj.Value
			while true do
				if vl then break end
				vl = obj.Value
				task.wait()
			end

			table.insert(objects, vl)
			unti = tick()+uniT
		end
	end)
	ev(evw)

	local d = tick()+1
	repeat task.wait() until objects[1] or tick() >= d

	if not objects[1] then evw:Disconnect(); return {} end

	unti = tick()+uniT
	repeat task.wait() until #objects >= amount or tick() >= unti

	evw:Disconnect()

	return objects
end
ev(UIS.InputBegan:Connect(function(k)
	if ignorekeyrn[k.KeyCode] then return end
	if UIS:GetFocusedTextBox() then return end

	local z = keybindsTD[keybindsI]
	if z and k.KeyCode == z then
		keybindsI = keybindsI + 1
		if not keybindsTD[keybindsI] then
			keybindsI = 1
			local obby = workspace.Obbies:FindFirstChild(plr.Name)
			if not obby then return noObby() end

			playAudio(customast("ocplus/sounds/lois I'm in ocplus.mp3"), 15)
			if not plr.Character then return end
			if not plr.Character.PrimaryPart then return end

			task.spawn(function()
				local function spawnH(a, ...)
					task.spawn(function(...)
						a:InvokeServer(...)
					end, ...)
				end
				spawnH(
					game.ReplicatedStorage.Events.AddObject,
					"Part",
					plr.Character.PrimaryPart.CFrame:ToWorldSpace(CFrame.new(0, 3+1, 0))
				)
				local z = awaitNewLink(obby, 1)
				z = z[1]
				if not z then return end

				spawnH(game.ReplicatedStorage.Events.MoveObject, {
					{
						z,
						z.CFrame,
						Vector3.new(6, 6, 0)
					}
				})
				spawnH(game.ReplicatedStorage.Events.EffectObject, {z}, "image", "Default")
				spawnH(game.ReplicatedStorage.Events.EffectObject, {z}, "image", "Image", "11834392991")
			end)
		end
	elseif k.KeyCode ~= Enum.KeyCode.Unknown then keybindsI = 1 end
end))

local rn = getVersionID(version)
local ar = getVersionID(HttpGet("https://raw.githubusercontent.com/nexpid/OCPlus/main/VERSION", "getting version") or "0")

if rn == ar then
	out:Fire(("OC+ v%s has loaded! Enjoy :)"):format(version), Color3.new(1, 1, 0.5), 10)
elseif rn > ar then
	out:Fire(("Newer version of OC+ detected!"):format(version), Color3.new(0.5, 1, 0.5), 10)
elseif ar > rn then
	out:Fire(("Older version of OC+ detected!"):format(version), Color3.new(1, 0.5, 0.5), 10)
	if _G.hasAlertedOldVersion ~= rn then
		out:Fire("Reexecute the script to actually run it.", Color3.new(1, 0.5, 0.5), 10)
		_G.hasAlertedOldVersion = rn
		if true then return end
	end
end
-- ðŸ¤­